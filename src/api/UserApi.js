/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseEnvelope from '../model/BaseEnvelope';
import EnvelopeListUserModelsReadBalanceTransaction from '../model/EnvelopeListUserModelsReadBalanceTransaction';
import EnvelopeListUserModelsReadBalanceType from '../model/EnvelopeListUserModelsReadBalanceType';
import EnvelopeUserModelsReadBalance from '../model/EnvelopeUserModelsReadBalance';
import EnvelopeUserModelsReadUserProfile from '../model/EnvelopeUserModelsReadUserProfile';
import PagedEnvelopeListUserModelsReadUserProfile from '../model/PagedEnvelopeListUserModelsReadUserProfile';
import UserModelsUserProfileQuery from '../model/UserModelsUserProfileQuery';
import UserModelsWriteBalanceTransaction from '../model/UserModelsWriteBalanceTransaction';
import UserModelsWriteUserProfile from '../model/UserModelsWriteUserProfile';

/**
* User service.
* @module api/UserApi
* @version v1.10.1
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUserBalance operation.
     * @callback module:api/UserApi~addUserBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user balance
     * Adds a balance transaction to a specific user.
     * @param {Number} userId 
     * @param {module:model/UserModelsWriteBalanceTransaction} balanceTransaction 
     * @param {module:api/UserApi~addUserBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    addUserBalance(userId, balanceTransaction, callback) {
      let postBody = balanceTransaction;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserBalance");
      }
      // verify the required parameter 'balanceTransaction' is set
      if (balanceTransaction === undefined || balanceTransaction === null) {
        throw new Error("Missing the required parameter 'balanceTransaction' when calling addUserBalance");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/User/{userId}/Balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserProfile operation.
     * @callback module:api/UserApi~createUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeUserModelsReadUserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user profile
     * @param {module:model/UserModelsWriteUserProfile} userProfile The user profile
     * @param {module:api/UserApi~createUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeUserModelsReadUserProfile}
     */
    createUserProfile(userProfile, callback) {
      let postBody = userProfile;
      // verify the required parameter 'userProfile' is set
      if (userProfile === undefined || userProfile === null) {
        throw new Error("Missing the required parameter 'userProfile' when calling createUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeUserModelsReadUserProfile;
      return this.apiClient.callApi(
        '/API/User', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserProfileEmail operation.
     * @callback module:api/UserApi~deleteUserProfileEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user profile (email)
     * @param {String} email Email address
     * @param {module:api/UserApi~deleteUserProfileEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    deleteUserProfileEmail(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling deleteUserProfileEmail");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/User/{email}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserProfileId operation.
     * @callback module:api/UserApi~deleteUserProfileIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user profile (id)
     * @param {Number} userId The user id
     * @param {module:api/UserApi~deleteUserProfileIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    deleteUserProfileId(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserProfileId");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/User/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserBalance operation.
     * @callback module:api/UserApi~getUserBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeUserModelsReadBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user balance
     * Gets the balance for a specific user.
     * @param {Number} userId 
     * @param {String} currency 
     * @param {module:api/UserApi~getUserBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeUserModelsReadBalance}
     */
    getUserBalance(userId, currency, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserBalance");
      }
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getUserBalance");
      }

      let pathParams = {
        'userId': userId,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeUserModelsReadBalance;
      return this.apiClient.callApi(
        '/API/User/{userId}/Balance/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserBalanceTransactions operation.
     * @callback module:api/UserApi~getUserBalanceTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListUserModelsReadBalanceTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user balance transactions
     * Gets all balance transactions for a specific user.
     * @param {Number} userId 
     * @param {String} currency 
     * @param {module:api/UserApi~getUserBalanceTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListUserModelsReadBalanceTransaction}
     */
    getUserBalanceTransactions(userId, currency, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserBalanceTransactions");
      }
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getUserBalanceTransactions");
      }

      let pathParams = {
        'userId': userId,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeListUserModelsReadBalanceTransaction;
      return this.apiClient.callApi(
        '/API/User/{userId}/BalanceTransaction/List/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserBalanceTypes operation.
     * @callback module:api/UserApi~getUserBalanceTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListUserModelsReadBalanceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user balance types
     * Gets all available balance types.
     * @param {module:api/UserApi~getUserBalanceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListUserModelsReadBalanceType}
     */
    getUserBalanceTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeListUserModelsReadBalanceType;
      return this.apiClient.callApi(
        '/API/BalanceType/List', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProfileEmail operation.
     * @callback module:api/UserApi~getUserProfileEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeUserModelsReadUserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user profile (email)
     * Gets a specific user profile via email.
     * @param {String} email The user email.
     * @param {module:api/UserApi~getUserProfileEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeUserModelsReadUserProfile}
     */
    getUserProfileEmail(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getUserProfileEmail");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeUserModelsReadUserProfile;
      return this.apiClient.callApi(
        '/API/User/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProfileId operation.
     * @callback module:api/UserApi~getUserProfileIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeUserModelsReadUserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user profile (id)
     * Gets a specific user profile via user id.
     * @param {Number} userId The user id.
     * @param {module:api/UserApi~getUserProfileIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeUserModelsReadUserProfile}
     */
    getUserProfileId(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserProfileId");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeUserModelsReadUserProfile;
      return this.apiClient.callApi(
        '/API/User/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryUserProfiles operation.
     * @callback module:api/UserApi~queryUserProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedEnvelopeListUserModelsReadUserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query user profiles
     * Queries user profiles and stores the result in a batch. Results are fetched from this batch one page at a time via subsequent requests.    BatchId is mandatory when fetching any page other than the first page.    If no BatchId is provided for the first page, a new batch is created and the id for that batch can be found in the response.
     * @param {Number} page The page to fetch. Omitting the page number will return the first page.
     * @param {module:model/UserModelsUserProfileQuery} query The details of the query.
     * @param {module:api/UserApi~queryUserProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedEnvelopeListUserModelsReadUserProfile}
     */
    queryUserProfiles(page, query, callback) {
      let postBody = query;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling queryUserProfiles");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryUserProfiles");
      }

      let pathParams = {
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PagedEnvelopeListUserModelsReadUserProfile;
      return this.apiClient.callApi(
        '/API/User/Query/{page}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserProfile operation.
     * @callback module:api/UserApi~updateUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user profile
     * Updates a user profile.    Any fields not specified in the request or with null value will be left unchanged.
     * @param {Number} userId The user id
     * @param {module:model/UserModelsWriteUserProfile} user The user profile
     * @param {module:api/UserApi~updateUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    updateUserProfile(userId, user, callback) {
      let postBody = user;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserProfile");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updateUserProfile");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/User/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
