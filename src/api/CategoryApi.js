/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseEnvelope from '../model/BaseEnvelope';
import CategoryModelsCategoryQuery from '../model/CategoryModelsCategoryQuery';
import CategoryModelsReadCategory from '../model/CategoryModelsReadCategory';
import CategoryModelsWriteCategory from '../model/CategoryModelsWriteCategory';
import EnvelopeCategoryModelsReadCategory from '../model/EnvelopeCategoryModelsReadCategory';

/**
* Category service.
* @module api/CategoryApi
* @version v1.10.1
*/
export default class CategoryApi {

    /**
    * Constructs a new CategoryApi. 
    * @alias module:api/CategoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCategory operation.
     * @callback module:api/CategoryApi~createCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeCategoryModelsReadCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create category
     * @param {module:model/CategoryModelsWriteCategory} category The category to create.
     * @param {module:api/CategoryApi~createCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeCategoryModelsReadCategory}
     */
    createCategory(category, callback) {
      let postBody = category;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling createCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeCategoryModelsReadCategory;
      return this.apiClient.callApi(
        '/API/Category', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategory operation.
     * @callback module:api/CategoryApi~getCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeCategoryModelsReadCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get category
     * @param {Number} id The id of the category to get.
     * @param {module:api/CategoryApi~getCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeCategoryModelsReadCategory}
     */
    getCategory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeCategoryModelsReadCategory;
      return this.apiClient.callApi(
        '/API/Category/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryCategories operation.
     * @callback module:api/CategoryApi~queryCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryModelsReadCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query categories
     * @param {module:model/CategoryModelsCategoryQuery} query The query to filter categories by.
     * @param {module:api/CategoryApi~queryCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryModelsReadCategory>}
     */
    queryCategories(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryCategories");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CategoryModelsReadCategory];
      return this.apiClient.callApi(
        '/API/Category/Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCategory operation.
     * @callback module:api/CategoryApi~updateCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeCategoryModelsReadCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update category
     * Leaving out a property will ensure no changes are made to that property.    Collection properties will delete and/or add as necessary to match the supplied data.
     * @param {Number} id The id of the category to update.
     * @param {module:model/CategoryModelsWriteCategory} category The category data to update.
     * @param {module:api/CategoryApi~updateCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeCategoryModelsReadCategory}
     */
    updateCategory(id, category, callback) {
      let postBody = category;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCategory");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling updateCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeCategoryModelsReadCategory;
      return this.apiClient.callApi(
        '/API/Category/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
