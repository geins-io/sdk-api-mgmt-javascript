/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseEnvelope from '../model/BaseEnvelope';
import EnvelopeListSystemString from '../model/EnvelopeListSystemString';
import EnvelopeListVariantModelsReadVariant from '../model/EnvelopeListVariantModelsReadVariant';
import EnvelopeVariantModelsReadVariantGroup from '../model/EnvelopeVariantModelsReadVariantGroup';
import VariantModelsWriteVariant from '../model/VariantModelsWriteVariant';
import VariantModelsWriteVariantGroup from '../model/VariantModelsWriteVariantGroup';

/**
* Variant service.
* @module api/VariantApi
* @version v1.10.1
*/
export default class VariantApi {

    /**
    * Constructs a new VariantApi. 
    * @alias module:api/VariantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addProductToVariantGroup operation.
     * @callback module:api/VariantApi~addProductToVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add product to variant group
     * Adds a product to an existing variant group.
     * @param {Number} groupId The id of the variant group to which a product should be added.
     * @param {String} productId The id of the product to be added to the target variant group.
     * @param {Array.<module:model/VariantModelsWriteVariant>} variant The variant details.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group.    Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/VariantApi~addProductToVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    addProductToVariantGroup(groupId, productId, variant, opts, callback) {
      opts = opts || {};
      let postBody = variant;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addProductToVariantGroup");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling addProductToVariantGroup");
      }
      // verify the required parameter 'variant' is set
      if (variant === undefined || variant === null) {
        throw new Error("Missing the required parameter 'variant' when calling addProductToVariantGroup");
      }

      let pathParams = {
        'groupId': groupId,
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/VariantGroup/{groupId}/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addProductToVariantGroupProduct operation.
     * @callback module:api/VariantApi~addProductToVariantGroupProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add product to variant group (product)
     * Adds a product to an existing variant group from another product.
     * @param {String} productId1 The id of a product belonging to the target group.
     * @param {String} productId2 The id of the product to be added to the target group.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group.    Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/VariantApi~addProductToVariantGroupProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    addProductToVariantGroupProduct(productId1, productId2, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId1' is set
      if (productId1 === undefined || productId1 === null) {
        throw new Error("Missing the required parameter 'productId1' when calling addProductToVariantGroupProduct");
      }
      // verify the required parameter 'productId2' is set
      if (productId2 === undefined || productId2 === null) {
        throw new Error("Missing the required parameter 'productId2' when calling addProductToVariantGroupProduct");
      }

      let pathParams = {
        'productId1': productId1,
        'productId2': productId2
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/Variant/{productId1}/{productId2}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVariantGroup operation.
     * @callback module:api/VariantApi~createVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create variant group
     * Creates a new variant group.
     * @param {module:model/VariantModelsWriteVariantGroup} variantGroup The settings for the new variant group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group.    Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/VariantApi~createVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    createVariantGroup(variantGroup, opts, callback) {
      opts = opts || {};
      let postBody = variantGroup;
      // verify the required parameter 'variantGroup' is set
      if (variantGroup === undefined || variantGroup === null) {
        throw new Error("Missing the required parameter 'variantGroup' when calling createVariantGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/VariantGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVariantGroupProduct operation.
     * @callback module:api/VariantApi~createVariantGroupProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create variant group (product)
     * Create a new variant group for the provided product id.
     * @param {String} productId The id of the product for which to create the variant group.
     * @param {module:model/VariantModelsWriteVariantGroup} variantGroup The settings for the new group.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group.    Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/VariantApi~createVariantGroupProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    createVariantGroupProduct(productId, variantGroup, opts, callback) {
      opts = opts || {};
      let postBody = variantGroup;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling createVariantGroupProduct");
      }
      // verify the required parameter 'variantGroup' is set
      if (variantGroup === undefined || variantGroup === null) {
        throw new Error("Missing the required parameter 'variantGroup' when calling createVariantGroupProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/Variant/{productId}/VariantGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariantGroupGroupId operation.
     * @callback module:api/VariantApi~deleteVariantGroupGroupIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete variant group (group id)
     * Deletes an entire variant group.
     * @param {Number} groupId The id of the variant group to delete.
     * @param {module:api/VariantApi~deleteVariantGroupGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    deleteVariantGroupGroupId(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteVariantGroupGroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/VariantGroup/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariantGroupProductId operation.
     * @callback module:api/VariantApi~deleteVariantGroupProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete variant group (product id)
     * Deletes an entire variant group based on product id.
     * @param {String} productId The id of a product that belongs to the variant group to remove.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {module:api/VariantApi~deleteVariantGroupProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    deleteVariantGroupProductId(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteVariantGroupProductId");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Variant/{productId}/VariantGroup', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantGroupGroupId operation.
     * @callback module:api/VariantApi~getVariantGroupGroupIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get variant group (group id)
     * Gets a specific variant group.
     * @param {Number} groupId The id of the variant group to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group.    Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/VariantApi~getVariantGroupGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    getVariantGroupGroupId(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getVariantGroupGroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/VariantGroup/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantGroupProductId operation.
     * @callback module:api/VariantApi~getVariantGroupProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get variant group (product id)
     * Gets the variant group for the provided product id.
     * @param {String} productId The id of the product, for which to get the group.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group.    Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/VariantApi~getVariantGroupProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    getVariantGroupProductId(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantGroupProductId");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/Variant/{productId}/VariantGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantLabels operation.
     * @callback module:api/VariantApi~getVariantLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListSystemString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get variant labels
     * Gets all valid variant labels.
     * @param {module:api/VariantApi~getVariantLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListSystemString}
     */
    getVariantLabels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeListSystemString;
      return this.apiClient.callApi(
        '/API/Variant/Labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeProductFromVariantGroup operation.
     * @callback module:api/VariantApi~removeProductFromVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove product from variant group
     * Removes a product from its variant group.
     * @param {String} productId The id of the product to remove from variant group.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group.    Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/VariantApi~removeProductFromVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    removeProductFromVariantGroup(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling removeProductFromVariantGroup");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/Variant/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariant operation.
     * @callback module:api/VariantApi~updateVariantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListVariantModelsReadVariant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update variant
     * Updates the variant details for the product with the provided id.
     * @param {String} productId The id of the product for which to update the variant details.
     * @param {Array.<module:model/VariantModelsWriteVariant>} variant The variant details.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {module:api/VariantApi~updateVariantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListVariantModelsReadVariant}
     */
    updateVariant(productId, variant, opts, callback) {
      opts = opts || {};
      let postBody = variant;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateVariant");
      }
      // verify the required parameter 'variant' is set
      if (variant === undefined || variant === null) {
        throw new Error("Missing the required parameter 'variant' when calling updateVariant");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeListVariantModelsReadVariant;
      return this.apiClient.callApi(
        '/API/Variant/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariantGroup operation.
     * @callback module:api/VariantApi~updateVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update variant group
     * Updates the settings of a variant group.
     * @param {Number} groupId The id of the variant group to update.
     * @param {module:model/VariantModelsWriteVariantGroup} variantGroup The new settings for the variant group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group.    Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/VariantApi~updateVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    updateVariantGroup(groupId, variantGroup, opts, callback) {
      opts = opts || {};
      let postBody = variantGroup;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateVariantGroup");
      }
      // verify the required parameter 'variantGroup' is set
      if (variantGroup === undefined || variantGroup === null) {
        throw new Error("Missing the required parameter 'variantGroup' when calling updateVariantGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/VariantGroup/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
