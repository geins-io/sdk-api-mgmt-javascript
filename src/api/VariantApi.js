/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Envelope from '../model/Envelope';
import EnvelopeString from '../model/EnvelopeString';
import EnvelopeVariantModelsReadVariant from '../model/EnvelopeVariantModelsReadVariant';
import EnvelopeVariantModelsReadVariantGroup from '../model/EnvelopeVariantModelsReadVariantGroup';
import VariantModelsWriteVariant from '../model/VariantModelsWriteVariant';
import VariantModelsWriteVariantGroup from '../model/VariantModelsWriteVariantGroup';

/**
* Variant service.
* @module api/VariantApi
* @version v1.7.1
*/
export default class VariantApi {

    /**
    * Constructs a new VariantApi. 
    * @alias module:api/VariantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addProductToVariantGroup operation.
     * @callback module:api/VariantApi~addProductToVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a product to an existing group
     * @param {Number} groupId The ID of the group to which a product should be added
     * @param {String} productId The ID of the product to be added to the target group.
     * @param {Array.<module:model/VariantModelsWriteVariant>} variant The variant details.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id provided.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group. Set to \"product\" to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/VariantApi~addProductToVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    addProductToVariantGroup(groupId, productId, variant, opts, callback) {
      opts = opts || {};
      let postBody = variant;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addProductToVariantGroup");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling addProductToVariantGroup");
      }
      // verify the required parameter 'variant' is set
      if (variant === undefined || variant === null) {
        throw new Error("Missing the required parameter 'variant' when calling addProductToVariantGroup");
      }

      let pathParams = {
        'groupId': groupId,
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/VariantGroup/{groupId}/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addProductToVariantGroupByProductId operation.
     * @callback module:api/VariantApi~addProductToVariantGroupByProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a product to an existing group
     * @param {String} productId1 The ID of a product belonging to the target group.
     * @param {String} productId2 The ID of the product to be added to the target group.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id provided.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group. Set to \"product\" to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/VariantApi~addProductToVariantGroupByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    addProductToVariantGroupByProductId(productId1, productId2, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId1' is set
      if (productId1 === undefined || productId1 === null) {
        throw new Error("Missing the required parameter 'productId1' when calling addProductToVariantGroupByProductId");
      }
      // verify the required parameter 'productId2' is set
      if (productId2 === undefined || productId2 === null) {
        throw new Error("Missing the required parameter 'productId2' when calling addProductToVariantGroupByProductId");
      }

      let pathParams = {
        'productId1': productId1,
        'productId2': productId2
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/Variant/{productId1}/{productId2}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVariantGroup operation.
     * @callback module:api/VariantApi~createVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new variant group
     * @param {module:model/VariantModelsWriteVariantGroup} variantGroup The settings for the new group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group. Set to \"product\" to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/VariantApi~createVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    createVariantGroup(variantGroup, opts, callback) {
      opts = opts || {};
      let postBody = variantGroup;
      // verify the required parameter 'variantGroup' is set
      if (variantGroup === undefined || variantGroup === null) {
        throw new Error("Missing the required parameter 'variantGroup' when calling createVariantGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/VariantGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVariantGroupWithProduct operation.
     * @callback module:api/VariantApi~createVariantGroupWithProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new group for the provided product id
     * @param {String} productId The id of the product, for which to create a group.
     * @param {module:model/VariantModelsWriteVariantGroup} variantGroup The settings for the new group.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id provided.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group. Set to \"product\" to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/VariantApi~createVariantGroupWithProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    createVariantGroupWithProduct(productId, variantGroup, opts, callback) {
      opts = opts || {};
      let postBody = variantGroup;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling createVariantGroupWithProduct");
      }
      // verify the required parameter 'variantGroup' is set
      if (variantGroup === undefined || variantGroup === null) {
        throw new Error("Missing the required parameter 'variantGroup' when calling createVariantGroupWithProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/Variant/{productId}/VariantGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariantGroup operation.
     * @callback module:api/VariantApi~deleteVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an entire variant group
     * @param {Number} groupId The ID of the group to delete
     * @param {module:api/VariantApi~deleteVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    deleteVariantGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteVariantGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/VariantGroup/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariantGroupByProductId operation.
     * @callback module:api/VariantApi~deleteVariantGroupByProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an entire variant group
     * @param {String} productId The id of a product that belongs to the group to remove.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id provided.
     * @param {module:api/VariantApi~deleteVariantGroupByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envelope}
     */
    deleteVariantGroupByProductId(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteVariantGroupByProductId");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Envelope;
      return this.apiClient.callApi(
        '/API/Variant/{productId}/VariantGroup', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantGroup operation.
     * @callback module:api/VariantApi~getVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific variant group
     * @param {Number} groupId The ID of the group to get
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group. Set to \"product\" to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/VariantApi~getVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    getVariantGroup(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getVariantGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/VariantGroup/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantGroupByProductId operation.
     * @callback module:api/VariantApi~getVariantGroupByProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the variant group for the provided id
     * @param {String} productId The id of the product, for which to get the group.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of id.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group. Set to \"product\" to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/VariantApi~getVariantGroupByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    getVariantGroupByProductId(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getVariantGroupByProductId");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/Variant/{productId}/VariantGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantLabels operation.
     * @callback module:api/VariantApi~getVariantLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all valid variant labels
     * @param {module:api/VariantApi~getVariantLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeString}
     */
    getVariantLabels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeString;
      return this.apiClient.callApi(
        '/API/Variant/Labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeProductFromVariantGroup operation.
     * @callback module:api/VariantApi~removeProductFromVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a product from its variant group
     * @param {String} productId The id of the product to remove from group.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id provided.
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group. Set to \"product\" to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/VariantApi~removeProductFromVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    removeProductFromVariantGroup(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling removeProductFromVariantGroup");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/Variant/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariant operation.
     * @callback module:api/VariantApi~updateVariantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the variant details for the product with the provided ID
     * @param {String} productId The ID of the product for which to update the variant details.
     * @param {Array.<module:model/VariantModelsWriteVariant>} variant The variant details.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id provided.
     * @param {module:api/VariantApi~updateVariantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariant}
     */
    updateVariant(productId, variant, opts, callback) {
      opts = opts || {};
      let postBody = variant;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateVariant");
      }
      // verify the required parameter 'variant' is set
      if (variant === undefined || variant === null) {
        throw new Error("Missing the required parameter 'variant' when calling updateVariant");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariant;
      return this.apiClient.callApi(
        '/API/Variant/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariantGroup operation.
     * @callback module:api/VariantApi~updateVariantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeVariantModelsReadVariantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the settings of a group
     * @param {Number} groupId The ID of the group to update
     * @param {module:model/VariantModelsWriteVariantGroup} variantGroup The new settings for the group
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of product child collections to also include with the variant group. Set to \"product\" to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/VariantApi~updateVariantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeVariantModelsReadVariantGroup}
     */
    updateVariantGroup(groupId, variantGroup, opts, callback) {
      opts = opts || {};
      let postBody = variantGroup;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateVariantGroup");
      }
      // verify the required parameter 'variantGroup' is set
      if (variantGroup === undefined || variantGroup === null) {
        throw new Error("Missing the required parameter 'variantGroup' when calling updateVariantGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeVariantModelsReadVariantGroup;
      return this.apiClient.callApi(
        '/API/VariantGroup/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
