/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIOrderOrderComment from '../model/APIOrderOrderComment';
import APIOrderTransactionData from '../model/APIOrderTransactionData';
import BaseEnvelope from '../model/BaseEnvelope';
import EnvelopeAPIOrderOrderCreationValidationStatus from '../model/EnvelopeAPIOrderOrderCreationValidationStatus';
import EnvelopeInt from '../model/EnvelopeInt';
import EnvelopeOrderCapture from '../model/EnvelopeOrderCapture';
import OrderModelsOrder from '../model/OrderModelsOrder';
import OrderModelsOrderQuery from '../model/OrderModelsOrderQuery';
import OrderModelsOrderStatus from '../model/OrderModelsOrderStatus';
import OrderModelsOrderUpdate from '../model/OrderModelsOrderUpdate';
import OrderProcessedCapture from '../model/OrderProcessedCapture';
import OrderValidateOrderCreationRequest from '../model/OrderValidateOrderCreationRequest';

/**
* Order service.
* @module api/OrderApi
* @version v1.10.1
*/
export default class OrderApi {

    /**
    * Constructs a new OrderApi. 
    * @alias module:api/OrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOrderComment operation.
     * @callback module:api/OrderApi~addOrderCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add order comment
     * Adds a comment to an order. This does not replace any previous comments.
     * @param {Number} id Order ID.
     * @param {module:model/APIOrderOrderComment} orderComment The comment
     * @param {module:api/OrderApi~addOrderCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    addOrderComment(id, orderComment, callback) {
      let postBody = orderComment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addOrderComment");
      }
      // verify the required parameter 'orderComment' is set
      if (orderComment === undefined || orderComment === null) {
        throw new Error("Missing the required parameter 'orderComment' when calling addOrderComment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Order/{id}/Comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelOrderRow operation.
     * @callback module:api/OrderApi~cancelOrderRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel order row
     * Cancels an order row.    Can only be done on an order that has not been delivered or cancelled.
     * @param {Number} orderId The id of the order containing the order row.
     * @param {Number} orderRowId The id of the order row to cancel.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.skipRestock If true will not restock the item that was cancelled. Defaults to false.
     * @param {module:api/OrderApi~cancelOrderRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    cancelOrderRow(orderId, orderRowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelOrderRow");
      }
      // verify the required parameter 'orderRowId' is set
      if (orderRowId === undefined || orderRowId === null) {
        throw new Error("Missing the required parameter 'orderRowId' when calling cancelOrderRow");
      }

      let pathParams = {
        'orderId': orderId,
        'orderRowId': orderRowId
      };
      let queryParams = {
        'skipRestock': opts['skipRestock']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Order/{orderId}/OrderRow/{orderRowId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countOrders operation.
     * @callback module:api/OrderApi~countOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count orders
     * Gets the number of orders placed with the supplied email address.
     * @param {String} email The email adress to aggregate on.
     * @param {module:api/OrderApi~countOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    countOrders(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling countOrders");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/API/Order/Count/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/OrderApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeInt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create order
     * Create a new order.
     * @param {module:model/OrderModelsOrder} order The order object.
     * @param {module:api/OrderApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeInt}
     */
    createOrder(order, callback) {
      let postBody = order;
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling createOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeInt;
      return this.apiClient.callApi(
        '/API/Order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrderId operation.
     * @callback module:api/OrderApi~createOrderIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeInt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create order id
     * Create a new order id.
     * @param {module:api/OrderApi~createOrderIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeInt}
     */
    createOrderId(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeInt;
      return this.apiClient.callApi(
        '/API/Order/Id', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrder operation.
     * @callback module:api/OrderApi~deleteOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete order
     * Deletes or deactivates an order.
     * @param {Number} id The ID of the order to delete.
     * @param {module:model/Number} operation The method of deletion desired.    0 = OnHold. Put this order on hold.    1 = Cancel. Cancel this order permanently.    2 = Deactivate. Mark this order as no longer active.
     * @param {module:api/OrderApi~deleteOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteOrder(id, operation, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrder");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling deleteOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCapture operation.
     * @callback module:api/OrderApi~getCaptureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeOrderCapture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get capture
     * @param {String} captureId Capture ID.
     * @param {module:api/OrderApi~getCaptureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeOrderCapture}
     */
    getCapture(captureId, callback) {
      let postBody = null;
      // verify the required parameter 'captureId' is set
      if (captureId === undefined || captureId === null) {
        throw new Error("Missing the required parameter 'captureId' when calling getCapture");
      }

      let pathParams = {
        'captureId': captureId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeOrderCapture;
      return this.apiClient.callApi(
        '/API/Order/Capture/{captureId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderId operation.
     * @callback module:api/OrderApi~getOrderIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderModelsOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order (id)
     * Get order by id.
     * @param {Number} id The ID of the order to get.
     * @param {String} include A comma separated string of related collections to include with this result set.    Possible values are:    rows    paymentdetails    shippingdetails    refunds
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.combineProductContainerRows If true, will combine all order rows that are part of a container into a single container row.
     * @param {module:api/OrderApi~getOrderIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderModelsOrder}
     */
    getOrderId(id, include, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrderId");
      }
      // verify the required parameter 'include' is set
      if (include === undefined || include === null) {
        throw new Error("Missing the required parameter 'include' when calling getOrderId");
      }

      let pathParams = {
        'id': id,
        'include': include
      };
      let queryParams = {
        'combineProductContainerRows': opts['combineProductContainerRows']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderModelsOrder;
      return this.apiClient.callApi(
        '/API/Order/{id}/{include}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderPublicId operation.
     * @callback module:api/OrderApi~getOrderPublicIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderModelsOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order (public id)
     * Get order by public id.
     * @param {String} publicId The Public ID of the order to get.
     * @param {String} include A comma separated string of related collections to include with this result set.    Possible values are:    rows    paymentdetails    shippingdetails    refunds
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.combineProductContainerRows If true, will combine all order rows that are part of a container into a single container row.
     * @param {module:api/OrderApi~getOrderPublicIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderModelsOrder}
     */
    getOrderPublicId(publicId, include, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'publicId' is set
      if (publicId === undefined || publicId === null) {
        throw new Error("Missing the required parameter 'publicId' when calling getOrderPublicId");
      }
      // verify the required parameter 'include' is set
      if (include === undefined || include === null) {
        throw new Error("Missing the required parameter 'include' when calling getOrderPublicId");
      }

      let pathParams = {
        'publicId': publicId,
        'include': include
      };
      let queryParams = {
        'combineProductContainerRows': opts['combineProductContainerRows']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderModelsOrder;
      return this.apiClient.callApi(
        '/API/OrderByPublicId/{publicId}/{include}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderStatuses operation.
     * @callback module:api/OrderApi~getOrderStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderModelsOrderStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order statuses
     * Get a list of available order statuses.
     * @param {module:api/OrderApi~getOrderStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderModelsOrderStatus>}
     */
    getOrderStatuses(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrderModelsOrderStatus];
      return this.apiClient.callApi(
        '/API/Order/Statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partialUpdateOfOrder operation.
     * @callback module:api/OrderApi~partialUpdateOfOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial update of an order
     * @param {Number} id The orderId of the order to update
     * @param {module:model/OrderModelsOrderUpdate} order The order object containing the properties that should be updated.
     * @param {module:api/OrderApi~partialUpdateOfOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    partialUpdateOfOrder(id, order, callback) {
      let postBody = order;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateOfOrder");
      }
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling partialUpdateOfOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryOrders operation.
     * @callback module:api/OrderApi~queryOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderModelsOrder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query orders
     * Queries orders.
     * @param {module:model/OrderModelsOrderQuery} query The details of the query.
     * @param {module:api/OrderApi~queryOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderModelsOrder>}
     */
    queryOrders(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryOrders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OrderModelsOrder];
      return this.apiClient.callApi(
        '/API/Order/Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setCaptureAsProcessed operation.
     * @callback module:api/OrderApi~setCaptureAsProcessedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set capture as processed
     * Sets a capture as processed (= captured).
     * @param {module:model/OrderProcessedCapture} processedCapture Contains CaptureId and optional metadata about capture.
     * @param {module:api/OrderApi~setCaptureAsProcessedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    setCaptureAsProcessed(processedCapture, callback) {
      let postBody = processedCapture;
      // verify the required parameter 'processedCapture' is set
      if (processedCapture === undefined || processedCapture === null) {
        throw new Error("Missing the required parameter 'processedCapture' when calling setCaptureAsProcessed");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Order/Capture/SetAsProcessed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPaymentAsPaid operation.
     * @callback module:api/OrderApi~setPaymentAsPaidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set payment as paid
     * @param {Number} paymentDetailId Payment Detail ID.
     * @param {module:api/OrderApi~setPaymentAsPaidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    setPaymentAsPaid(paymentDetailId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentDetailId' is set
      if (paymentDetailId === undefined || paymentDetailId === null) {
        throw new Error("Missing the required parameter 'paymentDetailId' when calling setPaymentAsPaid");
      }

      let pathParams = {
        'paymentDetailId': paymentDetailId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Order/PaymentDetail/{paymentDetailId}/SetAsPaid', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderStatus operation.
     * @callback module:api/OrderApi~updateOrderStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update order status
     * @param {Number} id The order id.
     * @param {module:model/Number} status The order status to set.    0 = Undefined    1 = Completed    2 = Cancelled    3 = OnHold    4 = Inactive    5 = OutOfStock    6 = Backorder    7 = Pending
     * @param {String} transactionId A transaction id can be set here if status is set to pending.
     * @param {String} secondaryTransactionId A secondary transaction id, if any, can be set here if status is set to pending.
     * @param {module:api/OrderApi~updateOrderStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    updateOrderStatus(id, status, transactionId, secondaryTransactionId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrderStatus");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateOrderStatus");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling updateOrderStatus");
      }
      // verify the required parameter 'secondaryTransactionId' is set
      if (secondaryTransactionId === undefined || secondaryTransactionId === null) {
        throw new Error("Missing the required parameter 'secondaryTransactionId' when calling updateOrderStatus");
      }

      let pathParams = {
        'id': id,
        'status': status,
        'transactionId': transactionId,
        'secondaryTransactionId': secondaryTransactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Order/{id}/Status/{status}/{transactionId}/{secondaryTransactionId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransactionData operation.
     * @callback module:api/OrderApi~updateTransactionDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update transaction data
     * Updates transaction data on an order.
     * @param {Number} id Order ID.
     * @param {module:model/APIOrderTransactionData} transactionData The transaction data
     * @param {module:api/OrderApi~updateTransactionDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    updateTransactionData(id, transactionData, callback) {
      let postBody = transactionData;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTransactionData");
      }
      // verify the required parameter 'transactionData' is set
      if (transactionData === undefined || transactionData === null) {
        throw new Error("Missing the required parameter 'transactionData' when calling updateTransactionData");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Order/{id}/TransactionData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateOrder operation.
     * @callback module:api/OrderApi~validateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeAPIOrderOrderCreationValidationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate order
     * Validates order data for order creation.
     * @param {module:model/OrderValidateOrderCreationRequest} request The order data to validate.
     * @param {module:api/OrderApi~validateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeAPIOrderOrderCreationValidationStatus}
     */
    validateOrder(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling validateOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeAPIOrderOrderCreationValidationStatus;
      return this.apiClient.callApi(
        '/API/Order/ValidateCreation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
