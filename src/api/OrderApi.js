/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIOrderOrderComment from '../model/APIOrderOrderComment';
import APIOrderTransactionData from '../model/APIOrderTransactionData';
import EnvelopeInt from '../model/EnvelopeInt';
import OrderCapture from '../model/OrderCapture';
import OrderModelsOrder from '../model/OrderModelsOrder';
import OrderModelsOrderQuery from '../model/OrderModelsOrderQuery';
import OrderModelsOrderStatus from '../model/OrderModelsOrderStatus';
import OrderModelsOrderUpdate from '../model/OrderModelsOrderUpdate';
import OrderProcessedCapture from '../model/OrderProcessedCapture';
import OrderProcessedRefund from '../model/OrderProcessedRefund';
import OrderRefund from '../model/OrderRefund';
import OrderValidateOrderCreationRequest from '../model/OrderValidateOrderCreationRequest';

/**
* Order service.
* @module api/OrderApi
* @version v1.7.1
*/
export default class OrderApi {

    /**
    * Constructs a new OrderApi. 
    * @alias module:api/OrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCommentToOrder operation.
     * @callback module:api/OrderApi~addCommentToOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a comment to the order
     * This add to (not replace) any previous comments.
     * @param {Number} id Order ID.
     * @param {module:model/APIOrderOrderComment} orderComment The comment
     * @param {module:api/OrderApi~addCommentToOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addCommentToOrder(id, orderComment, callback) {
      let postBody = orderComment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addCommentToOrder");
      }
      // verify the required parameter 'orderComment' is set
      if (orderComment === undefined || orderComment === null) {
        throw new Error("Missing the required parameter 'orderComment' when calling addCommentToOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/{id}/Comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/OrderApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeInt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a new order
     * @param {module:model/OrderModelsOrder} order The order object.
     * @param {module:api/OrderApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeInt}
     */
    createOrder(order, callback) {
      let postBody = order;
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling createOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeInt;
      return this.apiClient.callApi(
        '/API/Order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrderId operation.
     * @callback module:api/OrderApi~createOrderIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeInt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new order id
     * @param {module:api/OrderApi~createOrderIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeInt}
     */
    createOrderId(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeInt;
      return this.apiClient.callApi(
        '/API/Order/Id', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrder operation.
     * @callback module:api/OrderApi~deleteOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes or deactivates an order
     * @param {Number} id The ID of the order to delete.
     * @param {module:model/Number} operation The method of deletion desired.
     * @param {module:api/OrderApi~deleteOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteOrder(id, operation, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrder");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling deleteOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCaptureById operation.
     * @callback module:api/OrderApi~getCaptureByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderCapture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Capture by Id
     * @param {String} captureId Capture ID.
     * @param {module:api/OrderApi~getCaptureByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderCapture}
     */
    getCaptureById(captureId, callback) {
      let postBody = null;
      // verify the required parameter 'captureId' is set
      if (captureId === undefined || captureId === null) {
        throw new Error("Missing the required parameter 'captureId' when calling getCaptureById");
      }

      let pathParams = {
        'captureId': captureId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = OrderCapture;
      return this.apiClient.callApi(
        '/API/Order/Capture/{captureId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderById operation.
     * @callback module:api/OrderApi~getOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderModelsOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an instance of a order
     * @param {Number} id The ID of the order to get.
     * @param {String} include A comma separated string of what related collections to include with this result set. The  possible values are: rows, paymentdetails, shippingdetails and refunds.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.combineProductContainerRows If true, will combine all order rows that are part of a container into a single container row.
     * @param {module:api/OrderApi~getOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderModelsOrder}
     */
    getOrderById(id, include, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrderById");
      }
      // verify the required parameter 'include' is set
      if (include === undefined || include === null) {
        throw new Error("Missing the required parameter 'include' when calling getOrderById");
      }

      let pathParams = {
        'id': id,
        'include': include
      };
      let queryParams = {
        'combineProductContainerRows': opts['combineProductContainerRows']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = OrderModelsOrder;
      return this.apiClient.callApi(
        '/API/Order/{id}/{include}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderStatuses operation.
     * @callback module:api/OrderApi~getOrderStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderModelsOrderStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of available order statuses
     * @param {module:api/OrderApi~getOrderStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderModelsOrderStatus>}
     */
    getOrderStatuses(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [OrderModelsOrderStatus];
      return this.apiClient.callApi(
        '/API/Order/Statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRefundById operation.
     * @callback module:api/OrderApi~getRefundByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderRefund} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Refund by Id
     * @param {String} refundId Refund ID.
     * @param {module:api/OrderApi~getRefundByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderRefund}
     */
    getRefundById(refundId, callback) {
      let postBody = null;
      // verify the required parameter 'refundId' is set
      if (refundId === undefined || refundId === null) {
        throw new Error("Missing the required parameter 'refundId' when calling getRefundById");
      }

      let pathParams = {
        'refundId': refundId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = OrderRefund;
      return this.apiClient.callApi(
        '/API/Order/Refund/{refundId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partialUpdateOfOrder operation.
     * @callback module:api/OrderApi~partialUpdateOfOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial update of an order
     * @param {Number} id The orderId of the order to update
     * @param {module:model/OrderModelsOrderUpdate} order The order object containing the properties that should be updated.
     * @param {module:api/OrderApi~partialUpdateOfOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    partialUpdateOfOrder(id, order, callback) {
      let postBody = order;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateOfOrder");
      }
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling partialUpdateOfOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryOrders operation.
     * @callback module:api/OrderApi~queryOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderModelsOrder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query the order repository
     * @param {module:model/OrderModelsOrderQuery} query The details of the query.
     * @param {module:api/OrderApi~queryOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderModelsOrder>}
     */
    queryOrders(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryOrders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [OrderModelsOrder];
      return this.apiClient.callApi(
        '/API/Order/Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setCaptureAsProcessed operation.
     * @callback module:api/OrderApi~setCaptureAsProcessedCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a capture as processed (= captured)
     * @param {module:model/OrderProcessedCapture} processedCapture Contains CaptureId and optional metadata about capture.
     * @param {module:api/OrderApi~setCaptureAsProcessedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setCaptureAsProcessed(processedCapture, callback) {
      let postBody = processedCapture;
      // verify the required parameter 'processedCapture' is set
      if (processedCapture === undefined || processedCapture === null) {
        throw new Error("Missing the required parameter 'processedCapture' when calling setCaptureAsProcessed");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/Capture/SetAsProcessed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPaymentAsPayed operation.
     * @callback module:api/OrderApi~setPaymentAsPayedCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Payment Detail as payed
     * @param {Number} paymentDetailId Payment Detail ID.
     * @param {module:api/OrderApi~setPaymentAsPayedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setPaymentAsPayed(paymentDetailId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentDetailId' is set
      if (paymentDetailId === undefined || paymentDetailId === null) {
        throw new Error("Missing the required parameter 'paymentDetailId' when calling setPaymentAsPayed");
      }

      let pathParams = {
        'paymentDetailId': paymentDetailId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/PaymentDetail/{paymentDetailId}/SetAsPayed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRefundAsProcessed operation.
     * @callback module:api/OrderApi~setRefundAsProcessedCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a refund as processed (= settled)
     * @param {module:model/OrderProcessedRefund} processedRefund Contains RefundId and optional metadata about refund.
     * @param {module:api/OrderApi~setRefundAsProcessedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setRefundAsProcessed(processedRefund, callback) {
      let postBody = processedRefund;
      // verify the required parameter 'processedRefund' is set
      if (processedRefund === undefined || processedRefund === null) {
        throw new Error("Missing the required parameter 'processedRefund' when calling setRefundAsProcessed");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/Refund/SetAsProcessed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderStatus operation.
     * @callback module:api/OrderApi~updateOrderStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update order status
     * @param {Number} id Order ID.
     * @param {module:model/Number} status Order status. These statuses can be set: cancelled, on-hold, inactive, out-of-stock,  backorder, completed, pending.
     * @param {String} transactionId A transaction id can be set here if status is set to pending.
     * @param {String} secondaryTransactionId A secondary transaction id, if any, can be set here if status is set to pending.
     * @param {module:api/OrderApi~updateOrderStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOrderStatus(id, status, transactionId, secondaryTransactionId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrderStatus");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateOrderStatus");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling updateOrderStatus");
      }
      // verify the required parameter 'secondaryTransactionId' is set
      if (secondaryTransactionId === undefined || secondaryTransactionId === null) {
        throw new Error("Missing the required parameter 'secondaryTransactionId' when calling updateOrderStatus");
      }

      let pathParams = {
        'id': id,
        'status': status,
        'transactionId': transactionId,
        'secondaryTransactionId': secondaryTransactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/{id}/Status/{status}/{transactionId}/{secondaryTransactionId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransactionData operation.
     * @callback module:api/OrderApi~updateTransactionDataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates transaction data on an order
     * @param {Number} id Order ID.
     * @param {module:model/APIOrderTransactionData} transactionData The transaction data
     * @param {module:api/OrderApi~updateTransactionDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateTransactionData(id, transactionData, callback) {
      let postBody = transactionData;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTransactionData");
      }
      // verify the required parameter 'transactionData' is set
      if (transactionData === undefined || transactionData === null) {
        throw new Error("Missing the required parameter 'transactionData' when calling updateTransactionData");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/{id}/TransactionData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateOrder operation.
     * @callback module:api/OrderApi~validateOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates order data for order creation.
     * @param {module:model/OrderValidateOrderCreationRequest} request The order data to validate.
     * @param {module:api/OrderApi~validateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    validateOrder(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling validateOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/API/Order/ValidateCreation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
