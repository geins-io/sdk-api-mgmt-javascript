/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseEnvelope from '../model/BaseEnvelope';
import EnvelopeProductParameterModelsReadProductParameter from '../model/EnvelopeProductParameterModelsReadProductParameter';
import EnvelopeProductParameterModelsReadProductParameterGroup from '../model/EnvelopeProductParameterModelsReadProductParameterGroup';
import EnvelopeProductParameterModelsReadProductParameterPredefinedValue from '../model/EnvelopeProductParameterModelsReadProductParameterPredefinedValue';
import EnvelopeProductParameterModelsReadProductParameterValue from '../model/EnvelopeProductParameterModelsReadProductParameterValue';
import ProductParameterModelsWriteProductParameter from '../model/ProductParameterModelsWriteProductParameter';
import ProductParameterModelsWriteProductParameterGroup from '../model/ProductParameterModelsWriteProductParameterGroup';
import ProductParameterModelsWriteProductParameterPredefinedValue from '../model/ProductParameterModelsWriteProductParameterPredefinedValue';
import ProductParameterModelsWriteProductParameterValue from '../model/ProductParameterModelsWriteProductParameterValue';
import ProductParameterModelsWriteProductParameterValueBatch from '../model/ProductParameterModelsWriteProductParameterValueBatch';

/**
* ProductParameter service.
* @module api/ProductParameterApi
* @version v1.10.1
*/
export default class ProductParameterApi {

    /**
    * Constructs a new ProductParameterApi. 
    * @alias module:api/ProductParameterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrUpdateProductParameterValue operation.
     * @callback module:api/ProductParameterApi~createOrUpdateProductParameterValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameterValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/update product parameter value
     * Creates or updates a new product parameter value.
     * @param {module:model/ProductParameterModelsWriteProductParameterValue} productParameterValue The product parameter value to create or update.
     * @param {module:api/ProductParameterApi~createOrUpdateProductParameterValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameterValue}
     */
    createOrUpdateProductParameterValue(productParameterValue, callback) {
      let postBody = productParameterValue;
      // verify the required parameter 'productParameterValue' is set
      if (productParameterValue === undefined || productParameterValue === null) {
        throw new Error("Missing the required parameter 'productParameterValue' when calling createOrUpdateProductParameterValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameterValue;
      return this.apiClient.callApi(
        '/API/ProductParameter/Value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProductParameter operation.
     * @callback module:api/ProductParameterApi~createProductParameterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create product parameter
     * Creates a new product parameter.
     * @param {module:model/ProductParameterModelsWriteProductParameter} productParameter The product parameter to create.
     * @param {module:api/ProductParameterApi~createProductParameterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameter}
     */
    createProductParameter(productParameter, callback) {
      let postBody = productParameter;
      // verify the required parameter 'productParameter' is set
      if (productParameter === undefined || productParameter === null) {
        throw new Error("Missing the required parameter 'productParameter' when calling createProductParameter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameter;
      return this.apiClient.callApi(
        '/API/ProductParameter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProductParameterGroup operation.
     * @callback module:api/ProductParameterApi~createProductParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create product parameter group
     * Creates a new product parameter group.
     * @param {module:model/ProductParameterModelsWriteProductParameterGroup} productParameterGroup The product parameter group to create.
     * @param {module:api/ProductParameterApi~createProductParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameterGroup}
     */
    createProductParameterGroup(productParameterGroup, callback) {
      let postBody = productParameterGroup;
      // verify the required parameter 'productParameterGroup' is set
      if (productParameterGroup === undefined || productParameterGroup === null) {
        throw new Error("Missing the required parameter 'productParameterGroup' when calling createProductParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameterGroup;
      return this.apiClient.callApi(
        '/API/ProductParameter/Group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProductParameterPredefinedValue operation.
     * @callback module:api/ProductParameterApi~createProductParameterPredefinedValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameterPredefinedValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create product parameter predefined value
     * Creates a new predefined value for a product parameter.
     * @param {module:model/ProductParameterModelsWriteProductParameterPredefinedValue} productParameterPredefinedValue The predefined value to create.
     * @param {module:api/ProductParameterApi~createProductParameterPredefinedValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameterPredefinedValue}
     */
    createProductParameterPredefinedValue(productParameterPredefinedValue, callback) {
      let postBody = productParameterPredefinedValue;
      // verify the required parameter 'productParameterPredefinedValue' is set
      if (productParameterPredefinedValue === undefined || productParameterPredefinedValue === null) {
        throw new Error("Missing the required parameter 'productParameterPredefinedValue' when calling createProductParameterPredefinedValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameterPredefinedValue;
      return this.apiClient.callApi(
        '/API/ProductParameter/PredefinedValue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductParameter operation.
     * @callback module:api/ProductParameterApi~getProductParameterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product parameter
     * Gets a specific product parameter
     * @param {Number} id The id of the product parameter to get.
     * @param {module:api/ProductParameterApi~getProductParameterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameter}
     */
    getProductParameter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductParameter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameter;
      return this.apiClient.callApi(
        '/API/ProductParameter/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductParameterGroup operation.
     * @callback module:api/ProductParameterApi~getProductParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product parameter group
     * Gets a specific product parameter group.
     * @param {Number} id The id of the product parameter group to get.
     * @param {module:api/ProductParameterApi~getProductParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameterGroup}
     */
    getProductParameterGroup(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductParameterGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameterGroup;
      return this.apiClient.callApi(
        '/API/ProductParameter/Group/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductParameterPredefinedValue operation.
     * @callback module:api/ProductParameterApi~getProductParameterPredefinedValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameterValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product parameter predefined value
     * Gets a specific predefined value for a product parameter.
     * @param {Number} id The id of the predefined value to get.
     * @param {module:api/ProductParameterApi~getProductParameterPredefinedValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameterValue}
     */
    getProductParameterPredefinedValue(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductParameterPredefinedValue");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameterValue;
      return this.apiClient.callApi(
        '/API/ProductParameter/PredefinedValue/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductParameterValue operation.
     * @callback module:api/ProductParameterApi~getProductParameterValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameterValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product parameter value
     * Gets a specific product parameter value.
     * @param {Number} id The id of the product parameter value to get.
     * @param {Object} opts Optional parameters
     * @param {String} opts.predefinedValueId The predefined value id of the product parameter value to get. Only applicable for parameter type Multi.
     * @param {module:api/ProductParameterApi~getProductParameterValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameterValue}
     */
    getProductParameterValue(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductParameterValue");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'predefinedValueId': opts['predefinedValueId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameterValue;
      return this.apiClient.callApi(
        '/API/ProductParameter/Value/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceProductParameterValuesBatch operation.
     * @callback module:api/ProductParameterApi~replaceProductParameterValuesBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace product parameter values (batch)
     * Replaces multiple product parameter values.
     * @param {module:model/ProductParameterModelsWriteProductParameterValueBatch} productParameterBatch The product parameter values to replace.
     * @param {module:api/ProductParameterApi~replaceProductParameterValuesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    replaceProductParameterValuesBatch(productParameterBatch, callback) {
      let postBody = productParameterBatch;
      // verify the required parameter 'productParameterBatch' is set
      if (productParameterBatch === undefined || productParameterBatch === null) {
        throw new Error("Missing the required parameter 'productParameterBatch' when calling replaceProductParameterValuesBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/ProductParameter/Values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductParameter operation.
     * @callback module:api/ProductParameterApi~updateProductParameterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product parameter
     * Updates a product parameter.    Leaving out a property will ensure no changes are made to that property. Collection properties will delete and/or add as necessary to match the supplied data.
     * @param {Number} id The id of the product parameter to update.
     * @param {module:model/ProductParameterModelsWriteProductParameter} productParameter The product parameter data to update.
     * @param {module:api/ProductParameterApi~updateProductParameterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameter}
     */
    updateProductParameter(id, productParameter, callback) {
      let postBody = productParameter;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProductParameter");
      }
      // verify the required parameter 'productParameter' is set
      if (productParameter === undefined || productParameter === null) {
        throw new Error("Missing the required parameter 'productParameter' when calling updateProductParameter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameter;
      return this.apiClient.callApi(
        '/API/ProductParameter/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductParameterGroup operation.
     * @callback module:api/ProductParameterApi~updateProductParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductParameterModelsReadProductParameterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product parameter group
     * Updates a product parameter group.    Leaving out a property will ensure no changes are made to that property. Collection properties will delete and/or add as necessary to match the supplied data.
     * @param {Number} id The id of the product parameter group to update.
     * @param {module:model/ProductParameterModelsWriteProductParameterGroup} productParameterGroup The product parameter group data to update.
     * @param {module:api/ProductParameterApi~updateProductParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductParameterModelsReadProductParameterGroup}
     */
    updateProductParameterGroup(id, productParameterGroup, callback) {
      let postBody = productParameterGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProductParameterGroup");
      }
      // verify the required parameter 'productParameterGroup' is set
      if (productParameterGroup === undefined || productParameterGroup === null) {
        throw new Error("Missing the required parameter 'productParameterGroup' when calling updateProductParameterGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductParameterModelsReadProductParameterGroup;
      return this.apiClient.callApi(
        '/API/ProductParameter/Group/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductParameterValuesBatch operation.
     * @callback module:api/ProductParameterApi~updateProductParameterValuesBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product parameter values (batch)
     * Updates multiple product parameter values.
     * @param {module:model/ProductParameterModelsWriteProductParameterValueBatch} productParameterBatch The product parameter values update.
     * @param {module:api/ProductParameterApi~updateProductParameterValuesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    updateProductParameterValuesBatch(productParameterBatch, callback) {
      let postBody = productParameterBatch;
      // verify the required parameter 'productParameterBatch' is set
      if (productParameterBatch === undefined || productParameterBatch === null) {
        throw new Error("Missing the required parameter 'productParameterBatch' when calling updateProductParameterValuesBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/ProductParameter/Values', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
