/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseEnvelope from '../model/BaseEnvelope';
import EnvelopeListReturn from '../model/EnvelopeListReturn';
import EnvelopeListReturnCode from '../model/EnvelopeListReturnCode';
import EnvelopeNullableInt from '../model/EnvelopeNullableInt';
import EnvelopeReturn from '../model/EnvelopeReturn';
import OrderReturnModelsWriteNewReturn from '../model/OrderReturnModelsWriteNewReturn';

/**
* Return service.
* @module api/ReturnApi
* @version v1.10.1
*/
export default class ReturnApi {

    /**
    * Constructs a new ReturnApi. 
    * @alias module:api/ReturnApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createReturn operation.
     * @callback module:api/ReturnApi~createReturnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeNullableInt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create return
     * Creates a new return.
     * @param {Number} orderId The Order ID.
     * @param {module:model/OrderReturnModelsWriteNewReturn} newReturn Contains all information about a return.
     * @param {module:api/ReturnApi~createReturnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeNullableInt}
     */
    createReturn(orderId, newReturn, callback) {
      let postBody = newReturn;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling createReturn");
      }
      // verify the required parameter 'newReturn' is set
      if (newReturn === undefined || newReturn === null) {
        throw new Error("Missing the required parameter 'newReturn' when calling createReturn");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeNullableInt;
      return this.apiClient.callApi(
        '/API/Order/{orderId}/Return', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReturn operation.
     * @callback module:api/ReturnApi~getReturnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeReturn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get return
     * @param {Number} orderId The order id.
     * @param {Number} returnId The return id.
     * @param {module:api/ReturnApi~getReturnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeReturn}
     */
    getReturn(orderId, returnId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getReturn");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling getReturn");
      }

      let pathParams = {
        'orderId': orderId,
        'returnId': returnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeReturn;
      return this.apiClient.callApi(
        '/API/Order/{orderId}/Return/{returnId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReturnCodes operation.
     * @callback module:api/ReturnApi~listReturnCodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListReturnCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List return codes
     * Gets all valid return codes.
     * @param {module:api/ReturnApi~listReturnCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListReturnCode}
     */
    listReturnCodes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeListReturnCode;
      return this.apiClient.callApi(
        '/API/ReturnCode/List', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReturns operation.
     * @callback module:api/ReturnApi~listReturnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListReturn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List returns
     * Get all returns on an order.
     * @param {Number} orderId The order id.
     * @param {module:api/ReturnApi~listReturnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListReturn}
     */
    listReturns(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling listReturns");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeListReturn;
      return this.apiClient.callApi(
        '/API/Order/{orderId}/Return/List', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
