/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PriceListModelsPriceList from '../model/PriceListModelsPriceList';
import PriceListModelsPriceListPriceResponse from '../model/PriceListModelsPriceListPriceResponse';
import PriceListModelsWritePriceListPrice from '../model/PriceListModelsWritePriceListPrice';

/**
* PriceList service.
* @module api/PriceListApi
* @version v1.10.1
*/
export default class PriceListApi {

    /**
    * Constructs a new PriceListApi. 
    * @alias module:api/PriceListApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listPriceLists operation.
     * @callback module:api/PriceListApi~listPriceListsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PriceListModelsPriceList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List price lists
     * Gets all price list definitions.    - Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.    - ID for Ordinary, Sale and Campaign price lists starts from 1000000.    The ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary=0, Sale=1, Capaign=2)    Eg:    Ordinary price list for market with ID 1 has ID = 1000000    Sale price list for market with ID 1 has ID = 1000001    Campaign price list for market with ID 1 has ID = 1000002    Ordinary price list for market with ID 2 has ID = 2000000
     * @param {module:api/PriceListApi~listPriceListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PriceListModelsPriceList>}
     */
    listPriceLists(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PriceListModelsPriceList];
      return this.apiClient.callApi(
        '/API/PriceList/List', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePriceListPrices operation.
     * @callback module:api/PriceListApi~updatePriceListPricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PriceListModelsPriceListPriceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update price list prices
     * Updates price list prices.    - Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.    - ID for Ordinary, Sale and Campaign price lists starts from 1000000.    The ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary=0, Sale=1, Capaign=2)    Eg:    Ordinary price list for market with ID 1 has ID = 1000000    Sale price list for market with ID 1 has ID = 1000001    Campaign price list for market with ID 1 has ID = 1000002    Ordinary price list for market with ID 2 has ID = 2000000
     * @param {Array.<module:model/PriceListModelsWritePriceListPrice>} priceListPrices List of new price list prices.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {Boolean} opts.pricesIncVat Set to true if prices includes VAT. Leave blank or set to false if they exclude VAT.
     * @param {module:api/PriceListApi~updatePriceListPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PriceListModelsPriceListPriceResponse}
     */
    updatePriceListPrices(priceListPrices, opts, callback) {
      opts = opts || {};
      let postBody = priceListPrices;
      // verify the required parameter 'priceListPrices' is set
      if (priceListPrices === undefined || priceListPrices === null) {
        throw new Error("Missing the required parameter 'priceListPrices' when calling updatePriceListPrices");
      }

      let pathParams = {
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'pricesIncVat': opts['pricesIncVat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PriceListModelsPriceListPriceResponse;
      return this.apiClient.callApi(
        '/API/PriceList/Price', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
