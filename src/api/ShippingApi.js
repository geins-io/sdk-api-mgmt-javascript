/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EnvelopeInt from '../model/EnvelopeInt';
import ShippingModelsParcelGroupOptions from '../model/ShippingModelsParcelGroupOptions';
import ShippingModelsShippingOption from '../model/ShippingModelsShippingOption';
import ShippingModelsShippingQuery from '../model/ShippingModelsShippingQuery';

/**
* Shipping service.
* @module api/ShippingApi
* @version v1.7.1
*/
export default class ShippingApi {

    /**
    * Constructs a new ShippingApi. 
    * @alias module:api/ShippingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createParcelGroup operation.
     * @callback module:api/ShippingApi~createParcelGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeInt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new parcel group
     * @param {module:model/ShippingModelsParcelGroupOptions} parcelGroupOptions Options for the new parcel group.
     * @param {module:api/ShippingApi~createParcelGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeInt}
     */
    createParcelGroup(parcelGroupOptions, callback) {
      let postBody = parcelGroupOptions;
      // verify the required parameter 'parcelGroupOptions' is set
      if (parcelGroupOptions === undefined || parcelGroupOptions === null) {
        throw new Error("Missing the required parameter 'parcelGroupOptions' when calling createParcelGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeInt;
      return this.apiClient.callApi(
        '/API/Shipping/ParcelGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryShippingOptions operation.
     * @callback module:api/ShippingApi~queryShippingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShippingModelsShippingOption>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query shipping options
     * No response envelope.
     * @param {module:model/ShippingModelsShippingQuery} shippingQuery The query to filter shipping options by.
     * @param {module:api/ShippingApi~queryShippingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShippingModelsShippingOption>}
     */
    queryShippingOptions(shippingQuery, callback) {
      let postBody = shippingQuery;
      // verify the required parameter 'shippingQuery' is set
      if (shippingQuery === undefined || shippingQuery === null) {
        throw new Error("Missing the required parameter 'shippingQuery' when calling queryShippingOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [ShippingModelsShippingOption];
      return this.apiClient.callApi(
        '/API/Shipping/Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
