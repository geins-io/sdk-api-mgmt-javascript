/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Envelope from '../model/Envelope';
import EnvelopeListProductModelsReadFeed from '../model/EnvelopeListProductModelsReadFeed';
import EnvelopeListProductModelsReadProduct from '../model/EnvelopeListProductModelsReadProduct';
import EnvelopeListProductModelsReadProductItem from '../model/EnvelopeListProductModelsReadProductItem';
import EnvelopeListProductModelsReadRelationType from '../model/EnvelopeListProductModelsReadRelationType';
import EnvelopeProductModelsReadProduct from '../model/EnvelopeProductModelsReadProduct';
import EnvelopeProductModelsReadProductItem from '../model/EnvelopeProductModelsReadProductItem';
import ProductModelsMonitorSku from '../model/ProductModelsMonitorSku';
import ProductModelsProductCategory from '../model/ProductModelsProductCategory';
import ProductModelsProductQuery from '../model/ProductModelsProductQuery';
import ProductModelsReadProductItem from '../model/ProductModelsReadProductItem';
import ProductModelsReadProductItemStock from '../model/ProductModelsReadProductItemStock';
import ProductModelsRelatedProductEnvelope from '../model/ProductModelsRelatedProductEnvelope';
import ProductModelsStockEnvelope from '../model/ProductModelsStockEnvelope';
import ProductModelsWriteProduct from '../model/ProductModelsWriteProduct';
import ProductModelsWriteProductItem from '../model/ProductModelsWriteProductItem';
import ProductModelsWriteProductItemStock from '../model/ProductModelsWriteProductItemStock';
import ProductModelsWriteRelatedProduct from '../model/ProductModelsWriteRelatedProduct';
import ProductProductItemEnvelope from '../model/ProductProductItemEnvelope';

/**
* Product service.
* @module api/ProductApi
* @version v1.7.1
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:api/ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAvailabilityMonitor operation.
     * @callback module:api/ProductApi~addAvailabilityMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a product availability monitor
     * @param {module:model/ProductModelsMonitorSku} model 
     * @param {module:api/ProductApi~addAvailabilityMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envelope}
     */
    addAvailabilityMonitor(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling addAvailabilityMonitor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Envelope;
      return this.apiClient.callApi(
        '/API/Product/MonitorAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCategoryToProduct operation.
     * @callback module:api/ProductApi~addCategoryToProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a category relation to a product
     * @param {String} productId The id of the product to update.
     * @param {module:model/ProductModelsProductCategory} productCategory The category to relate the product to.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied in {productId}.
     * @param {module:api/ProductApi~addCategoryToProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envelope}
     */
    addCategoryToProduct(productId, productCategory, opts, callback) {
      opts = opts || {};
      let postBody = productCategory;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling addCategoryToProduct");
      }
      // verify the required parameter 'productCategory' is set
      if (productCategory === undefined || productCategory === null) {
        throw new Error("Missing the required parameter 'productCategory' when calling addCategoryToProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Envelope;
      return this.apiClient.callApi(
        '/API/Product/{productId}/Category', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addImageToProduct operation.
     * @callback module:api/ProductApi~addImageToProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an image relation to a product
     * @param {String} productId The id of the product to update.
     * @param {String} imageName The name of the image to set to product.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isPrimaryImage Specifies whether {imageName} should be set as the primary image of the product.
     * @param {module:model/Number} opts.productIdType The type of product id supplied in {productId}.
     * @param {module:api/ProductApi~addImageToProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envelope}
     */
    addImageToProduct(productId, imageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling addImageToProduct");
      }
      // verify the required parameter 'imageName' is set
      if (imageName === undefined || imageName === null) {
        throw new Error("Missing the required parameter 'imageName' when calling addImageToProduct");
      }

      let pathParams = {
        'productId': productId,
        'imageName': imageName
      };
      let queryParams = {
        'isPrimaryImage': opts['isPrimaryImage'],
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Envelope;
      return this.apiClient.callApi(
        '/API/Product/{productId}/Image/{imageName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRelatedProductsToProduct operation.
     * @callback module:api/ProductApi~addRelatedProductsToProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductModelsRelatedProductEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add related products to a product
     * @param {String} productId The id of the main product to which the relations will be created
     * @param {Array.<module:model/ProductModelsWriteRelatedProduct>} relatedProducts The list of related products to link with the main product.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id for {productId} and supplied in {relatedProducts}.
     * @param {module:api/ProductApi~addRelatedProductsToProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductModelsRelatedProductEnvelope}
     */
    addRelatedProductsToProduct(productId, relatedProducts, opts, callback) {
      opts = opts || {};
      let postBody = relatedProducts;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling addRelatedProductsToProduct");
      }
      // verify the required parameter 'relatedProducts' is set
      if (relatedProducts === undefined || relatedProducts === null) {
        throw new Error("Missing the required parameter 'relatedProducts' when calling addRelatedProductsToProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ProductModelsRelatedProductEnvelope;
      return this.apiClient.callApi(
        '/API/Product/{productId}/Related', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchUpdateProductItems operation.
     * @callback module:api/ProductApi~batchUpdateProductItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Envelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates product items in batch
     * @param {Array.<module:model/ProductModelsWriteProductItem>} productItems The product items to update
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productItemIdType The type of product item id
     * @param {module:api/ProductApi~batchUpdateProductItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Envelope}
     */
    batchUpdateProductItems(productItems, opts, callback) {
      opts = opts || {};
      let postBody = productItems;
      // verify the required parameter 'productItems' is set
      if (productItems === undefined || productItems === null) {
        throw new Error("Missing the required parameter 'productItems' when calling batchUpdateProductItems");
      }

      let pathParams = {
      };
      let queryParams = {
        'productItemIdType': opts['productItemIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Envelope;
      return this.apiClient.callApi(
        '/API/Product/Items', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchUpdateStockValues operation.
     * @callback module:api/ProductApi~batchUpdateStockValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductModelsStockEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update stock values for multiple product items
     * @param {Array.<module:model/ProductModelsWriteProductItemStock>} productItemStocks List of product item ids with new stock values.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productItemIdType The type of product item id supplied in {productItemStocks}.
     * @param {module:api/ProductApi~batchUpdateStockValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductModelsStockEnvelope}
     */
    batchUpdateStockValues(productItemStocks, opts, callback) {
      opts = opts || {};
      let postBody = productItemStocks;
      // verify the required parameter 'productItemStocks' is set
      if (productItemStocks === undefined || productItemStocks === null) {
        throw new Error("Missing the required parameter 'productItemStocks' when calling batchUpdateStockValues");
      }

      let pathParams = {
      };
      let queryParams = {
        'productItemIdType': opts['productItemIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ProductModelsStockEnvelope;
      return this.apiClient.callApi(
        '/API/Product/Stock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProduct operation.
     * @callback module:api/ProductApi~createProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product
     * @param {module:model/ProductModelsWriteProduct} product The product to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/ProductApi~createProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProduct}
     */
    createProduct(product, opts, callback) {
      opts = opts || {};
      let postBody = product;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling createProduct");
      }

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProductItems operation.
     * @callback module:api/ProductApi~createProductItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProductItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product item
     * @param {String} productId The id of the product to create an item on.
     * @param {module:model/ProductModelsWriteProductItem} productItem The product item to create.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied in {productId}.
     * @param {module:api/ProductApi~createProductItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProductItem}
     */
    createProductItems(productId, productItem, opts, callback) {
      opts = opts || {};
      let postBody = productItem;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductItems");
      }
      // verify the required parameter 'productItem' is set
      if (productItem === undefined || productItem === null) {
        throw new Error("Missing the required parameter 'productItem' when calling createProductItems");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeProductModelsReadProductItem;
      return this.apiClient.callApi(
        '/API/Product/{productId}/Item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductById operation.
     * @callback module:api/ProductApi~getProductByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific product
     * @param {String} productId The id of the product to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied in {productId}.
     * @param {String} opts.include Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/ProductApi~getProductByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProduct}
     */
    getProductById(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductById");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductItemById operation.
     * @callback module:api/ProductApi~getProductItemByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductProductItemEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific product item
     * @param {String} itemId The id of the product item to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productItemIdType The type of product item id supplied in {itemId}.
     * @param {module:api/ProductApi~getProductItemByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductProductItemEnvelope}
     */
    getProductItemById(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getProductItemById");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'productItemIdType': opts['productItemIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ProductProductItemEnvelope;
      return this.apiClient.callApi(
        '/API/Product/Item/{itemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkRelatedProductsByRelationId operation.
     * @callback module:api/ProductApi~linkRelatedProductsByRelationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductModelsRelatedProductEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add related products to a product using a fixed relation type
     * @param {String} productId The id of the main product to which the relations will be created
     * @param {Number} relationTypeId The relation type id that will apply to all related products in {relatedProducts}
     * @param {Array.<module:model/ProductModelsWriteRelatedProduct>} relatedProducts The list of related products to link with the main product.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id for {productId} and supplied in {relatedProducts}.
     * @param {module:api/ProductApi~linkRelatedProductsByRelationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductModelsRelatedProductEnvelope}
     */
    linkRelatedProductsByRelationId(productId, relationTypeId, relatedProducts, opts, callback) {
      opts = opts || {};
      let postBody = relatedProducts;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling linkRelatedProductsByRelationId");
      }
      // verify the required parameter 'relationTypeId' is set
      if (relationTypeId === undefined || relationTypeId === null) {
        throw new Error("Missing the required parameter 'relationTypeId' when calling linkRelatedProductsByRelationId");
      }
      // verify the required parameter 'relatedProducts' is set
      if (relatedProducts === undefined || relatedProducts === null) {
        throw new Error("Missing the required parameter 'relatedProducts' when calling linkRelatedProductsByRelationId");
      }

      let pathParams = {
        'productId': productId,
        'relationTypeId': relationTypeId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ProductModelsRelatedProductEnvelope;
      return this.apiClient.callApi(
        '/API/Product/{productId}/Related/{relationTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllProductItemsPaged operation.
     * @callback module:api/ProductApi~listAllProductItemsPagedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListProductModelsReadProductItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all product items with pagination
     * @param {Number} page The page to fetch
     * @param {module:api/ProductApi~listAllProductItemsPagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListProductModelsReadProductItem}
     */
    listAllProductItemsPaged(page, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling listAllProductItemsPaged");
      }

      let pathParams = {
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeListProductModelsReadProductItem;
      return this.apiClient.callApi(
        '/API/Product/Items/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFeeds operation.
     * @callback module:api/ProductApi~listFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListProductModelsReadFeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all feeds
     * @param {module:api/ProductApi~listFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListProductModelsReadFeed}
     */
    listFeeds(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeListProductModelsReadFeed;
      return this.apiClient.callApi(
        '/API/Product/Feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductItems operation.
     * @callback module:api/ProductApi~listProductItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductModelsReadProductItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all product items
     * @param {module:api/ProductApi~listProductItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductModelsReadProductItem>}
     */
    listProductItems(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [ProductModelsReadProductItem];
      return this.apiClient.callApi(
        '/API/Product/Items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductRelationTypes operation.
     * @callback module:api/ProductApi~listProductRelationTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListProductModelsReadRelationType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of product relation types
     * @param {module:api/ProductApi~listProductRelationTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListProductModelsReadRelationType}
     */
    listProductRelationTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeListProductModelsReadRelationType;
      return this.apiClient.callApi(
        '/API/Product/RelationTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryProducts operation.
     * @callback module:api/ProductApi~queryProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query products
     * @param {module:model/ProductModelsProductQuery} query The details of the query
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/ProductApi~queryProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListProductModelsReadProduct}
     */
    queryProducts(query, opts, callback) {
      opts = opts || {};
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryProducts");
      }

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeListProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product/Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryProductsPaged operation.
     * @callback module:api/ProductApi~queryProductsPagedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query products with pagination
     * The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
     * @param {Number} page The page to fetch. To start a new batched query it is mandatory to send in page=1
     * @param {module:model/ProductModelsProductQuery} query The details of the query
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/ProductApi~queryProductsPagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListProductModelsReadProduct}
     */
    queryProductsPaged(page, query, opts, callback) {
      opts = opts || {};
      let postBody = query;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling queryProductsPaged");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryProductsPaged");
      }

      let pathParams = {
        'page': page
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeListProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product/Query/{page}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryStock operation.
     * @callback module:api/ProductApi~queryStockCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductModelsReadProductItemStock>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query stock
     * @param {Array.<Number>} productItemIds The details of the query.
     * @param {module:api/ProductApi~queryStockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductModelsReadProductItemStock>}
     */
    queryStock(productItemIds, callback) {
      let postBody = productItemIds;
      // verify the required parameter 'productItemIds' is set
      if (productItemIds === undefined || productItemIds === null) {
        throw new Error("Missing the required parameter 'productItemIds' when calling queryStock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [ProductModelsReadProductItemStock];
      return this.apiClient.callApi(
        '/API/Product/Stock/Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback module:api/ProductApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a product
     * @param {String} productId The id of the product to update.
     * @param {module:model/ProductModelsWriteProduct} product The product data to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied in {productId}.
     * @param {String} opts.include Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options.
     * @param {module:api/ProductApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProduct}
     */
    updateProduct(productId, product, opts, callback) {
      opts = opts || {};
      let postBody = product;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProduct");
      }
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling updateProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductItem operation.
     * @callback module:api/ProductApi~updateProductItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProductItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a product item
     * @param {String} itemId The id of the product item to update.
     * @param {module:model/ProductModelsWriteProductItem} productItem The product item data to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productItemIdType The type of product item id supplied in {itemId}.
     * @param {module:api/ProductApi~updateProductItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProductItem}
     */
    updateProductItem(itemId, productItem, opts, callback) {
      opts = opts || {};
      let postBody = productItem;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateProductItem");
      }
      // verify the required parameter 'productItem' is set
      if (productItem === undefined || productItem === null) {
        throw new Error("Missing the required parameter 'productItem' when calling updateProductItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'productItemIdType': opts['productItemIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = EnvelopeProductModelsReadProductItem;
      return this.apiClient.callApi(
        '/API/Product/Item/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
