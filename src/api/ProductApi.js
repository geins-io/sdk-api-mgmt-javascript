/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseEnvelope from '../model/BaseEnvelope';
import EnvelopeListProductModelsReadFeed from '../model/EnvelopeListProductModelsReadFeed';
import EnvelopeListProductModelsReadProductItem from '../model/EnvelopeListProductModelsReadProductItem';
import EnvelopeListProductModelsReadProductItemStock from '../model/EnvelopeListProductModelsReadProductItemStock';
import EnvelopeListProductModelsReadRelationType from '../model/EnvelopeListProductModelsReadRelationType';
import EnvelopeProductModelsReadProduct from '../model/EnvelopeProductModelsReadProduct';
import EnvelopeProductModelsReadProductItem from '../model/EnvelopeProductModelsReadProductItem';
import EnvelopeProductModelsReadProductItemResult from '../model/EnvelopeProductModelsReadProductItemResult';
import PagedEnvelopeListProductModelsReadProduct from '../model/PagedEnvelopeListProductModelsReadProduct';
import ProductModelsMonitorSku from '../model/ProductModelsMonitorSku';
import ProductModelsProductCategory from '../model/ProductModelsProductCategory';
import ProductModelsProductQuery from '../model/ProductModelsProductQuery';
import ProductModelsReadProductItem from '../model/ProductModelsReadProductItem';
import ProductModelsRelatedProductEnvelope from '../model/ProductModelsRelatedProductEnvelope';
import ProductModelsStockEnvelope from '../model/ProductModelsStockEnvelope';
import ProductModelsWriteProduct from '../model/ProductModelsWriteProduct';
import ProductModelsWriteProductItem from '../model/ProductModelsWriteProductItem';
import ProductModelsWriteProductItemStock from '../model/ProductModelsWriteProductItemStock';
import ProductModelsWriteRelatedProduct from '../model/ProductModelsWriteRelatedProduct';
import ProductProductItemEnvelope from '../model/ProductProductItemEnvelope';

/**
* Product service.
* @module api/ProductApi
* @version v1.10.1
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:api/ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAvailabilityMonitor operation.
     * @callback module:api/ProductApi~addAvailabilityMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add availability monitor
     * Adds a product availability monitor.
     * @param {module:model/ProductModelsMonitorSku} model 
     * @param {module:api/ProductApi~addAvailabilityMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    addAvailabilityMonitor(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling addAvailabilityMonitor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Product/MonitorAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCategoryToProduct operation.
     * @callback module:api/ProductApi~addCategoryToProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add category to product
     * Adds a category relation to a product.
     * @param {String} productId The id of the product to update.
     * @param {module:model/ProductModelsProductCategory} productCategory The category to relate the product to.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {module:api/ProductApi~addCategoryToProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    addCategoryToProduct(productId, productCategory, opts, callback) {
      opts = opts || {};
      let postBody = productCategory;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling addCategoryToProduct");
      }
      // verify the required parameter 'productCategory' is set
      if (productCategory === undefined || productCategory === null) {
        throw new Error("Missing the required parameter 'productCategory' when calling addCategoryToProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Product/{productId}/Category', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRelatedProductsToProduct operation.
     * @callback module:api/ProductApi~addRelatedProductsToProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductModelsRelatedProductEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add related products to a product
     * @param {String} productId The id of the main product to which the relations will be created
     * @param {Array.<module:model/ProductModelsWriteRelatedProduct>} relatedProducts The list of related products to link with the main product.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied in productId and relatedProducts.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {module:api/ProductApi~addRelatedProductsToProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductModelsRelatedProductEnvelope}
     */
    addRelatedProductsToProduct(productId, relatedProducts, opts, callback) {
      opts = opts || {};
      let postBody = relatedProducts;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling addRelatedProductsToProduct");
      }
      // verify the required parameter 'relatedProducts' is set
      if (relatedProducts === undefined || relatedProducts === null) {
        throw new Error("Missing the required parameter 'relatedProducts' when calling addRelatedProductsToProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductModelsRelatedProductEnvelope;
      return this.apiClient.callApi(
        '/API/Product/{productId}/Related', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProduct operation.
     * @callback module:api/ProductApi~createProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create product
     * Creates a new product.
     * @param {module:model/ProductModelsWriteProduct} product The product to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/ProductApi~createProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProduct}
     */
    createProduct(product, opts, callback) {
      opts = opts || {};
      let postBody = product;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling createProduct");
      }

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProductItem operation.
     * @callback module:api/ProductApi~createProductItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProductItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create product item
     * Creates a new product item.
     * @param {String} productId The id of the product to create an item on.
     * @param {module:model/ProductModelsWriteProductItem} productItem The product item to create.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {module:api/ProductApi~createProductItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProductItem}
     */
    createProductItem(productId, productItem, opts, callback) {
      opts = opts || {};
      let postBody = productItem;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling createProductItem");
      }
      // verify the required parameter 'productItem' is set
      if (productItem === undefined || productItem === null) {
        throw new Error("Missing the required parameter 'productItem' when calling createProductItem");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductModelsReadProductItem;
      return this.apiClient.callApi(
        '/API/Product/{productId}/Item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProduct operation.
     * @callback module:api/ProductApi~deleteProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete product
     * Deletes a specific product.
     * @param {String} productId The id of the product to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {module:api/ProductApi~deleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseEnvelope}
     */
    deleteProduct(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseEnvelope;
      return this.apiClient.callApi(
        '/API/Product/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProduct operation.
     * @callback module:api/ProductApi~getProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product
     * Gets a specific product. Make sure to include relevant child-collections in the request.
     * @param {String} productId The id of the product to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {String} opts.include Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/ProductApi~getProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProduct}
     */
    getProduct(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductItem operation.
     * @callback module:api/ProductApi~getProductItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductProductItemEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product item
     * Gets a specific product item (SKU).
     * @param {String} itemId The id of the product item to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productItemIdType The type of product item id supplied.    0 = Internal. Internal product item id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product item id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.    4 = ExternalId. External product item id set by customer.               Eg: 10001.
     * @param {module:api/ProductApi~getProductItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductProductItemEnvelope}
     */
    getProductItem(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getProductItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'productItemIdType': opts['productItemIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductProductItemEnvelope;
      return this.apiClient.callApi(
        '/API/Product/Item/{itemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkRelatedProducts operation.
     * @callback module:api/ProductApi~linkRelatedProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductModelsRelatedProductEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link related products
     * Add related products to a product using a fixed relation type.
     * @param {String} productId The id of the main product to which the relations will be created.
     * @param {Number} relationTypeId The relation type id that will apply to all related products in relatedProducts.
     * @param {Array.<module:model/ProductModelsWriteRelatedProduct>} relatedProducts The list of related products to link with the main product.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied in productId and relatedProducts.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {module:api/ProductApi~linkRelatedProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductModelsRelatedProductEnvelope}
     */
    linkRelatedProducts(productId, relationTypeId, relatedProducts, opts, callback) {
      opts = opts || {};
      let postBody = relatedProducts;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling linkRelatedProducts");
      }
      // verify the required parameter 'relationTypeId' is set
      if (relationTypeId === undefined || relationTypeId === null) {
        throw new Error("Missing the required parameter 'relationTypeId' when calling linkRelatedProducts");
      }
      // verify the required parameter 'relatedProducts' is set
      if (relatedProducts === undefined || relatedProducts === null) {
        throw new Error("Missing the required parameter 'relatedProducts' when calling linkRelatedProducts");
      }

      let pathParams = {
        'productId': productId,
        'relationTypeId': relationTypeId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductModelsRelatedProductEnvelope;
      return this.apiClient.callApi(
        '/API/Product/{productId}/Related/{relationTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFeeds operation.
     * @callback module:api/ProductApi~listFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListProductModelsReadFeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List feeds
     * Gets a list of all feeds.
     * @param {module:api/ProductApi~listFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListProductModelsReadFeed}
     */
    listFeeds(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeListProductModelsReadFeed;
      return this.apiClient.callApi(
        '/API/Product/Feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductItems operation.
     * @callback module:api/ProductApi~listProductItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductModelsReadProductItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List product items
     * Gets all product items.
     * @param {module:api/ProductApi~listProductItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductModelsReadProductItem>}
     */
    listProductItems(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductModelsReadProductItem];
      return this.apiClient.callApi(
        '/API/Product/Items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductItemsPaged operation.
     * @callback module:api/ProductApi~listProductItemsPagedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListProductModelsReadProductItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List product items (paged)
     * Gets all product items with pagination.
     * @param {Number} page The page to fetch.
     * @param {module:api/ProductApi~listProductItemsPagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListProductModelsReadProductItem}
     */
    listProductItemsPaged(page, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling listProductItemsPaged");
      }

      let pathParams = {
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeListProductModelsReadProductItem;
      return this.apiClient.callApi(
        '/API/Product/Items/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductRelationTypes operation.
     * @callback module:api/ProductApi~listProductRelationTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListProductModelsReadRelationType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List product relation types
     * Gets a list of product relation types
     * @param {module:api/ProductApi~listProductRelationTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListProductModelsReadRelationType}
     */
    listProductRelationTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeListProductModelsReadRelationType;
      return this.apiClient.callApi(
        '/API/Product/RelationTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryProducts operation.
     * @callback module:api/ProductApi~queryProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedEnvelopeListProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query products
     * @param {module:model/ProductModelsProductQuery} query The details of the query.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/ProductApi~queryProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedEnvelopeListProductModelsReadProduct}
     */
    queryProducts(query, opts, callback) {
      opts = opts || {};
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryProducts");
      }

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PagedEnvelopeListProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product/Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryProductsPaged operation.
     * @callback module:api/ProductApi~queryProductsPagedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedEnvelopeListProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query products (paged)
     * The batch id is mandatory when fetching any page other than the first page.    If no batch id is provided for the first page, then a new batch is created.    Batch id and pagination information can be found in the response.
     * @param {Number} page The page to fetch. To start a new batched query it is mandatory to send in page=1.
     * @param {module:model/ProductModelsProductQuery} query The details of the query.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/ProductApi~queryProductsPagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedEnvelopeListProductModelsReadProduct}
     */
    queryProductsPaged(page, query, opts, callback) {
      opts = opts || {};
      let postBody = query;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling queryProductsPaged");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryProductsPaged");
      }

      let pathParams = {
        'page': page
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PagedEnvelopeListProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product/Query/{page}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryStock operation.
     * @callback module:api/ProductApi~queryStockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeListProductModelsReadProductItemStock} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query stock
     * @param {Array.<Number>} productItemIds The details of the query.
     * @param {module:api/ProductApi~queryStockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeListProductModelsReadProductItemStock}
     */
    queryStock(productItemIds, callback) {
      let postBody = productItemIds;
      // verify the required parameter 'productItemIds' is set
      if (productItemIds === undefined || productItemIds === null) {
        throw new Error("Missing the required parameter 'productItemIds' when calling queryStock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeListProductModelsReadProductItemStock;
      return this.apiClient.callApi(
        '/API/Product/Stock/Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlinkRelatedProductsViaRelation operation.
     * @callback module:api/ProductApi~unlinkRelatedProductsViaRelationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductModelsRelatedProductEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlink related products (via relation).
     * Remove related products from a product using a fixed relation type.
     * @param {String} productId The id of the main product from which the relations will be removed.
     * @param {Number} relationTypeId The relation type id that will apply to all related products in relatedProducts.
     * @param {Array.<module:model/ProductModelsWriteRelatedProduct>} relatedProducts The list of related products to unlink from the main product.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied in productId and relatedProducts.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {module:api/ProductApi~unlinkRelatedProductsViaRelationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductModelsRelatedProductEnvelope}
     */
    unlinkRelatedProductsViaRelation(productId, relationTypeId, relatedProducts, opts, callback) {
      opts = opts || {};
      let postBody = relatedProducts;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling unlinkRelatedProductsViaRelation");
      }
      // verify the required parameter 'relationTypeId' is set
      if (relationTypeId === undefined || relationTypeId === null) {
        throw new Error("Missing the required parameter 'relationTypeId' when calling unlinkRelatedProductsViaRelation");
      }
      // verify the required parameter 'relatedProducts' is set
      if (relatedProducts === undefined || relatedProducts === null) {
        throw new Error("Missing the required parameter 'relatedProducts' when calling unlinkRelatedProductsViaRelation");
      }

      let pathParams = {
        'productId': productId,
        'relationTypeId': relationTypeId
      };
      let queryParams = {
        'productIdType': opts['productIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductModelsRelatedProductEnvelope;
      return this.apiClient.callApi(
        '/API/Product/{productId}/UnlinkRelated/{relationTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback module:api/ProductApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product
     * Updates a product.
     * @param {String} productId The id of the product to update.
     * @param {module:model/ProductModelsWriteProduct} product The product data to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productIdType The type of product id supplied.    0 = Internal. Internal product id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.
     * @param {String} opts.include Set to empty string to only include basic product data or null to not include any product data.    Valid options:    Names, ShortTexts, LongTexts, TechTexts, Items, Prices, Categories, Parameters, Variants, Markets, Images, Feeds, Urls, ShippingFees, RelatedProducts, DiscountCampaigns
     * @param {module:api/ProductApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProduct}
     */
    updateProduct(productId, product, opts, callback) {
      opts = opts || {};
      let postBody = product;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateProduct");
      }
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling updateProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'productIdType': opts['productIdType'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductModelsReadProduct;
      return this.apiClient.callApi(
        '/API/Product/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductItem operation.
     * @callback module:api/ProductApi~updateProductItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProductItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product item
     * Updates a product item.
     * @param {String} itemId The id of the product item to update.
     * @param {module:model/ProductModelsWriteProductItem} productItem The product item data to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productItemIdType The type of product item id supplied.    0 = Internal. Internal product item id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product item id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.    4 = ExternalId. External product item id set by customer.               Eg: 10001.
     * @param {module:api/ProductApi~updateProductItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProductItem}
     */
    updateProductItem(itemId, productItem, opts, callback) {
      opts = opts || {};
      let postBody = productItem;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateProductItem");
      }
      // verify the required parameter 'productItem' is set
      if (productItem === undefined || productItem === null) {
        throw new Error("Missing the required parameter 'productItem' when calling updateProductItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'productItemIdType': opts['productItemIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductModelsReadProductItem;
      return this.apiClient.callApi(
        '/API/Product/Item/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductItemsBatch operation.
     * @callback module:api/ProductApi~updateProductItemsBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeProductModelsReadProductItemResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product items (batch)
     * Updates product items in batch.
     * @param {Array.<module:model/ProductModelsWriteProductItem>} productItems The product items to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productItemIdType The type of product item ids supplied.    0 = Internal. Internal product item id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product item id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.    4 = ExternalId. External product item id set by customer.               Eg: 10001.
     * @param {module:api/ProductApi~updateProductItemsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeProductModelsReadProductItemResult}
     */
    updateProductItemsBatch(productItems, opts, callback) {
      opts = opts || {};
      let postBody = productItems;
      // verify the required parameter 'productItems' is set
      if (productItems === undefined || productItems === null) {
        throw new Error("Missing the required parameter 'productItems' when calling updateProductItemsBatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'productItemIdType': opts['productItemIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeProductModelsReadProductItemResult;
      return this.apiClient.callApi(
        '/API/Product/Items', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStockBatch operation.
     * @callback module:api/ProductApi~updateStockBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductModelsStockEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update stock (batch)
     * Update stock values for multiple product items.
     * @param {Array.<module:model/ProductModelsWriteProductItemStock>} productItemStocks List of product item ids with new stock values.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} opts.productItemIdType The type of product item id supplied.    0 = Internal. Internal product item id set by Geins.               Eg: 10001.    1 = ArticleNumber. Article number set by customer.               Eg: ABC123.    2 = MarketPrefixedInternal. Internal product item id set by Geins, prefixed with market.               Eg: SE10001.    3 = MarketPrefixedArticleNumber. Article number set by customer, prefixed with market.               Eg: SEABC123.    4 = ExternalId. External product item id set by customer.               Eg: 10001.
     * @param {module:api/ProductApi~updateStockBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductModelsStockEnvelope}
     */
    updateStockBatch(productItemStocks, opts, callback) {
      opts = opts || {};
      let postBody = productItemStocks;
      // verify the required parameter 'productItemStocks' is set
      if (productItemStocks === undefined || productItemStocks === null) {
        throw new Error("Missing the required parameter 'productItemStocks' when calling updateStockBatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'productItemIdType': opts['productItemIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductModelsStockEnvelope;
      return this.apiClient.callApi(
        '/API/Product/Stock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
