/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseEnvelope from '../model/BaseEnvelope';
import BrandModelsBrandQuery from '../model/BrandModelsBrandQuery';
import BrandModelsReadBrand from '../model/BrandModelsReadBrand';
import BrandModelsWriteBrand from '../model/BrandModelsWriteBrand';
import EnvelopeBrandModelsReadBrand from '../model/EnvelopeBrandModelsReadBrand';

/**
* Brand service.
* @module api/BrandApi
* @version v1.10.1
*/
export default class BrandApi {

    /**
    * Constructs a new BrandApi. 
    * @alias module:api/BrandApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBrand operation.
     * @callback module:api/BrandApi~createBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeBrandModelsReadBrand} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create brand
     * @param {module:model/BrandModelsWriteBrand} brand The brand to create.
     * @param {module:api/BrandApi~createBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeBrandModelsReadBrand}
     */
    createBrand(brand, callback) {
      let postBody = brand;
      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling createBrand");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeBrandModelsReadBrand;
      return this.apiClient.callApi(
        '/API/Brand', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrand operation.
     * @callback module:api/BrandApi~getBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeBrandModelsReadBrand} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get brand
     * Gets a specific brand by id.
     * @param {Number} id The id of the brand to get.
     * @param {module:api/BrandApi~getBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeBrandModelsReadBrand}
     */
    getBrand(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBrand");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvelopeBrandModelsReadBrand;
      return this.apiClient.callApi(
        '/API/Brand/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryBrands operation.
     * @callback module:api/BrandApi~queryBrandsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BrandModelsReadBrand>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query brands
     * @param {module:model/BrandModelsBrandQuery} query The details of the brand query.
     * @param {module:api/BrandApi~queryBrandsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BrandModelsReadBrand>}
     */
    queryBrands(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryBrands");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [BrandModelsReadBrand];
      return this.apiClient.callApi(
        '/API/Brand/Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrand operation.
     * @callback module:api/BrandApi~updateBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvelopeBrandModelsReadBrand} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update brand
     * Leaving out a property will ensure no changes are made to that property.    Collection properties will delete and/or add as necessary to match the supplied data.
     * @param {Number} id The id of the brand to update.
     * @param {module:model/BrandModelsWriteBrand} brand The brand data to update.
     * @param {module:api/BrandApi~updateBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvelopeBrandModelsReadBrand}
     */
    updateBrand(id, brand, callback) {
      let postBody = brand;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBrand");
      }
      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling updateBrand");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvelopeBrandModelsReadBrand;
      return this.apiClient.callApi(
        '/API/Brand/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
