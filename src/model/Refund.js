/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RefundCoreModelsOrderOrderRow from './RefundCoreModelsOrderOrderRow';
import RefundRow from './RefundRow';

/**
 * The Refund model module.
 * @module model/Refund
 * @version v1.10.1
 */
class Refund {
    /**
     * Constructs a new <code>Refund</code>.
     * A refund.
     * @alias module:model/Refund
     */
    constructor() { 
        
        Refund.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Refund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Refund} obj Optional instance to populate.
     * @return {module:model/Refund} The populated <code>Refund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Refund();

            if (data.hasOwnProperty('RefundId')) {
                obj['RefundId'] = ApiClient.convertToType(data['RefundId'], 'String');
            }
            if (data.hasOwnProperty('RefundInstanceId')) {
                obj['RefundInstanceId'] = ApiClient.convertToType(data['RefundInstanceId'], 'Number');
            }
            if (data.hasOwnProperty('OrderId')) {
                obj['OrderId'] = ApiClient.convertToType(data['OrderId'], 'Number');
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Author')) {
                obj['Author'] = ApiClient.convertToType(data['Author'], 'String');
            }
            if (data.hasOwnProperty('ExternalOrderId')) {
                obj['ExternalOrderId'] = ApiClient.convertToType(data['ExternalOrderId'], 'String');
            }
            if (data.hasOwnProperty('OrderTransactionId')) {
                obj['OrderTransactionId'] = ApiClient.convertToType(data['OrderTransactionId'], 'String');
            }
            if (data.hasOwnProperty('SecondaryOrderTransactionId')) {
                obj['SecondaryOrderTransactionId'] = ApiClient.convertToType(data['SecondaryOrderTransactionId'], 'String');
            }
            if (data.hasOwnProperty('ExternalId')) {
                obj['ExternalId'] = ApiClient.convertToType(data['ExternalId'], 'String');
            }
            if (data.hasOwnProperty('PaymentName')) {
                obj['PaymentName'] = ApiClient.convertToType(data['PaymentName'], 'String');
            }
            if (data.hasOwnProperty('Locale')) {
                obj['Locale'] = ApiClient.convertToType(data['Locale'], 'String');
            }
            if (data.hasOwnProperty('SiteName')) {
                obj['SiteName'] = ApiClient.convertToType(data['SiteName'], 'String');
            }
            if (data.hasOwnProperty('Customer')) {
                obj['Customer'] = ApiClient.convertToType(data['Customer'], 'String');
            }
            if (data.hasOwnProperty('OrderSum')) {
                obj['OrderSum'] = ApiClient.convertToType(data['OrderSum'], 'Number');
            }
            if (data.hasOwnProperty('OrderVat')) {
                obj['OrderVat'] = ApiClient.convertToType(data['OrderVat'], 'Number');
            }
            if (data.hasOwnProperty('OrderValue')) {
                obj['OrderValue'] = ApiClient.convertToType(data['OrderValue'], 'Number');
            }
            if (data.hasOwnProperty('OrderDiscount')) {
                obj['OrderDiscount'] = ApiClient.convertToType(data['OrderDiscount'], 'Number');
            }
            if (data.hasOwnProperty('ShippingFee')) {
                obj['ShippingFee'] = ApiClient.convertToType(data['ShippingFee'], 'Number');
            }
            if (data.hasOwnProperty('PaymentFee')) {
                obj['PaymentFee'] = ApiClient.convertToType(data['PaymentFee'], 'Number');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('CreatedOn')) {
                obj['CreatedOn'] = ApiClient.convertToType(data['CreatedOn'], 'Date');
            }
            if (data.hasOwnProperty('SentOn')) {
                obj['SentOn'] = ApiClient.convertToType(data['SentOn'], 'Date');
            }
            if (data.hasOwnProperty('ProcessedOn')) {
                obj['ProcessedOn'] = ApiClient.convertToType(data['ProcessedOn'], 'Date');
            }
            if (data.hasOwnProperty('Sent')) {
                obj['Sent'] = ApiClient.convertToType(data['Sent'], 'Boolean');
            }
            if (data.hasOwnProperty('Processed')) {
                obj['Processed'] = ApiClient.convertToType(data['Processed'], 'Boolean');
            }
            if (data.hasOwnProperty('RequiresApproval')) {
                obj['RequiresApproval'] = ApiClient.convertToType(data['RequiresApproval'], 'Boolean');
            }
            if (data.hasOwnProperty('Approved')) {
                obj['Approved'] = ApiClient.convertToType(data['Approved'], 'Boolean');
            }
            if (data.hasOwnProperty('ApprovalDecidedBy')) {
                obj['ApprovalDecidedBy'] = ApiClient.convertToType(data['ApprovalDecidedBy'], 'String');
            }
            if (data.hasOwnProperty('ApprovalDecidedOn')) {
                obj['ApprovalDecidedOn'] = ApiClient.convertToType(data['ApprovalDecidedOn'], 'Date');
            }
            if (data.hasOwnProperty('VatRate')) {
                obj['VatRate'] = ApiClient.convertToType(data['VatRate'], 'Number');
            }
            if (data.hasOwnProperty('SkipRefundEvents')) {
                obj['SkipRefundEvents'] = ApiClient.convertToType(data['SkipRefundEvents'], 'Boolean');
            }
            if (data.hasOwnProperty('RefundedItemTotal')) {
                obj['RefundedItemTotal'] = ApiClient.convertToType(data['RefundedItemTotal'], 'Number');
            }
            if (data.hasOwnProperty('RefundedShippingFee')) {
                obj['RefundedShippingFee'] = ApiClient.convertToType(data['RefundedShippingFee'], 'Number');
            }
            if (data.hasOwnProperty('RefundedPaymentFee')) {
                obj['RefundedPaymentFee'] = ApiClient.convertToType(data['RefundedPaymentFee'], 'Number');
            }
            if (data.hasOwnProperty('RefundedDiscount')) {
                obj['RefundedDiscount'] = ApiClient.convertToType(data['RefundedDiscount'], 'Number');
            }
            if (data.hasOwnProperty('RefundedBalance')) {
                obj['RefundedBalance'] = ApiClient.convertToType(data['RefundedBalance'], 'Number');
            }
            if (data.hasOwnProperty('RefundedTotal')) {
                obj['RefundedTotal'] = ApiClient.convertToType(data['RefundedTotal'], 'Number');
            }
            if (data.hasOwnProperty('RefundRows')) {
                obj['RefundRows'] = ApiClient.convertToType(data['RefundRows'], [RefundRow]);
            }
            if (data.hasOwnProperty('Rows')) {
                obj['Rows'] = ApiClient.convertToType(data['Rows'], [RefundCoreModelsOrderOrderRow]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Refund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Refund</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['RefundId'] && !(typeof data['RefundId'] === 'string' || data['RefundId'] instanceof String)) {
            throw new Error("Expected the field `RefundId` to be a primitive type in the JSON string but got " + data['RefundId']);
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Author'] && !(typeof data['Author'] === 'string' || data['Author'] instanceof String)) {
            throw new Error("Expected the field `Author` to be a primitive type in the JSON string but got " + data['Author']);
        }
        // ensure the json data is a string
        if (data['ExternalOrderId'] && !(typeof data['ExternalOrderId'] === 'string' || data['ExternalOrderId'] instanceof String)) {
            throw new Error("Expected the field `ExternalOrderId` to be a primitive type in the JSON string but got " + data['ExternalOrderId']);
        }
        // ensure the json data is a string
        if (data['OrderTransactionId'] && !(typeof data['OrderTransactionId'] === 'string' || data['OrderTransactionId'] instanceof String)) {
            throw new Error("Expected the field `OrderTransactionId` to be a primitive type in the JSON string but got " + data['OrderTransactionId']);
        }
        // ensure the json data is a string
        if (data['SecondaryOrderTransactionId'] && !(typeof data['SecondaryOrderTransactionId'] === 'string' || data['SecondaryOrderTransactionId'] instanceof String)) {
            throw new Error("Expected the field `SecondaryOrderTransactionId` to be a primitive type in the JSON string but got " + data['SecondaryOrderTransactionId']);
        }
        // ensure the json data is a string
        if (data['ExternalId'] && !(typeof data['ExternalId'] === 'string' || data['ExternalId'] instanceof String)) {
            throw new Error("Expected the field `ExternalId` to be a primitive type in the JSON string but got " + data['ExternalId']);
        }
        // ensure the json data is a string
        if (data['PaymentName'] && !(typeof data['PaymentName'] === 'string' || data['PaymentName'] instanceof String)) {
            throw new Error("Expected the field `PaymentName` to be a primitive type in the JSON string but got " + data['PaymentName']);
        }
        // ensure the json data is a string
        if (data['Locale'] && !(typeof data['Locale'] === 'string' || data['Locale'] instanceof String)) {
            throw new Error("Expected the field `Locale` to be a primitive type in the JSON string but got " + data['Locale']);
        }
        // ensure the json data is a string
        if (data['SiteName'] && !(typeof data['SiteName'] === 'string' || data['SiteName'] instanceof String)) {
            throw new Error("Expected the field `SiteName` to be a primitive type in the JSON string but got " + data['SiteName']);
        }
        // ensure the json data is a string
        if (data['Customer'] && !(typeof data['Customer'] === 'string' || data['Customer'] instanceof String)) {
            throw new Error("Expected the field `Customer` to be a primitive type in the JSON string but got " + data['Customer']);
        }
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }
        // ensure the json data is a string
        if (data['ApprovalDecidedBy'] && !(typeof data['ApprovalDecidedBy'] === 'string' || data['ApprovalDecidedBy'] instanceof String)) {
            throw new Error("Expected the field `ApprovalDecidedBy` to be a primitive type in the JSON string but got " + data['ApprovalDecidedBy']);
        }
        if (data['RefundRows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['RefundRows'])) {
                throw new Error("Expected the field `RefundRows` to be an array in the JSON data but got " + data['RefundRows']);
            }
            // validate the optional field `RefundRows` (array)
            for (const item of data['RefundRows']) {
                RefundRow.validateJsonObject(item);
            };
        }
        if (data['Rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Rows'])) {
                throw new Error("Expected the field `Rows` to be an array in the JSON data but got " + data['Rows']);
            }
            // validate the optional field `Rows` (array)
            for (const item of data['Rows']) {
                RefundCoreModelsOrderOrderRow.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * The id of the refund.
 * @member {String} RefundId
 */
Refund.prototype['RefundId'] = undefined;

/**
 * The internal id of the refund.
 * @member {Number} RefundInstanceId
 */
Refund.prototype['RefundInstanceId'] = undefined;

/**
 * The order id of the order that the refund belongs to.
 * @member {Number} OrderId
 */
Refund.prototype['OrderId'] = undefined;

/**
 * A custom refund reference.
 * @member {String} Reference
 */
Refund.prototype['Reference'] = undefined;

/**
 * A custom refund description.
 * @member {String} Description
 */
Refund.prototype['Description'] = undefined;

/**
 * The name of the author of the refund.
 * @member {String} Author
 */
Refund.prototype['Author'] = undefined;

/**
 * The external order id of the order.
 * @member {String} ExternalOrderId
 */
Refund.prototype['ExternalOrderId'] = undefined;

/**
 * A transaction id of the order.
 * @member {String} OrderTransactionId
 */
Refund.prototype['OrderTransactionId'] = undefined;

/**
 * An secondary transaction id of the order.
 * @member {String} SecondaryOrderTransactionId
 */
Refund.prototype['SecondaryOrderTransactionId'] = undefined;

/**
 * An external transaction id of the order.
 * @member {String} ExternalId
 */
Refund.prototype['ExternalId'] = undefined;

/**
 * The name of the payment used in the order.
 * @member {String} PaymentName
 */
Refund.prototype['PaymentName'] = undefined;

/**
 * The locale of the order.
 * @member {String} Locale
 */
Refund.prototype['Locale'] = undefined;

/**
 * The market the order was placed on.
 * @member {String} SiteName
 */
Refund.prototype['SiteName'] = undefined;

/**
 * The customer name.
 * @member {String} Customer
 */
Refund.prototype['Customer'] = undefined;

/**
 * The sum of the order.
 * @member {Number} OrderSum
 */
Refund.prototype['OrderSum'] = undefined;

/**
 * The total vat of the order.
 * @member {Number} OrderVat
 */
Refund.prototype['OrderVat'] = undefined;

/**
 * The total value of the order rows.
 * @member {Number} OrderValue
 */
Refund.prototype['OrderValue'] = undefined;

/**
 * THe total discount on the order.
 * @member {Number} OrderDiscount
 */
Refund.prototype['OrderDiscount'] = undefined;

/**
 * The order shipping fee.
 * @member {Number} ShippingFee
 */
Refund.prototype['ShippingFee'] = undefined;

/**
 * The order payment fee.
 * @member {Number} PaymentFee
 */
Refund.prototype['PaymentFee'] = undefined;

/**
 * The code of the currency used for the refund.
 * @member {String} Currency
 */
Refund.prototype['Currency'] = undefined;

/**
 * The date the refund was created.
 * @member {Date} CreatedOn
 */
Refund.prototype['CreatedOn'] = undefined;

/**
 * The date the refund was marked as sent.
 * @member {Date} SentOn
 */
Refund.prototype['SentOn'] = undefined;

/**
 * The date the refund was marked as processed.
 * @member {Date} ProcessedOn
 */
Refund.prototype['ProcessedOn'] = undefined;

/**
 * If true, the refund has been marked as sent.
 * @member {Boolean} Sent
 */
Refund.prototype['Sent'] = undefined;

/**
 * If true, the refund has been marked as processed.
 * @member {Boolean} Processed
 */
Refund.prototype['Processed'] = undefined;

/**
 * True if this refund requires approval before being sent, processed or settled.
 * @member {Boolean} RequiresApproval
 */
Refund.prototype['RequiresApproval'] = undefined;

/**
 * Null if undecided, true if approved and false if denied. Only applicable if RequiresApproval is true.
 * @member {Boolean} Approved
 */
Refund.prototype['Approved'] = undefined;

/**
 * The name of the one that approved or denied the refund.
 * @member {String} ApprovalDecidedBy
 */
Refund.prototype['ApprovalDecidedBy'] = undefined;

/**
 * The date that the refund was approved or denied.
 * @member {Date} ApprovalDecidedOn
 */
Refund.prototype['ApprovalDecidedOn'] = undefined;

/**
 * Vat rate. E.g. 0.25 for 25%, 0.12 for 12%.
 * @member {Number} VatRate
 */
Refund.prototype['VatRate'] = undefined;

/**
 * Whether or not refund events will be sent for this refund.
 * @member {Boolean} SkipRefundEvents
 */
Refund.prototype['SkipRefundEvents'] = undefined;

/**
 * The total amount refunded from order rows.
 * @member {Number} RefundedItemTotal
 */
Refund.prototype['RefundedItemTotal'] = undefined;

/**
 * The amount refunded from the shipping fee.
 * @member {Number} RefundedShippingFee
 */
Refund.prototype['RefundedShippingFee'] = undefined;

/**
 * The amount refunded from the payment fee.
 * @member {Number} RefundedPaymentFee
 */
Refund.prototype['RefundedPaymentFee'] = undefined;

/**
 * The amount refunded from the discount (can be split over several refunds).
 * @member {Number} RefundedDiscount
 */
Refund.prototype['RefundedDiscount'] = undefined;

/**
 * The amount refunded from the balance (can be split over several refunds).
 * @member {Number} RefundedBalance
 */
Refund.prototype['RefundedBalance'] = undefined;

/**
 * Total amount refunded.
 * @member {Number} RefundedTotal
 */
Refund.prototype['RefundedTotal'] = undefined;

/**
 * List of refund rows belonging to this refund.
 * @member {Array.<module:model/RefundRow>} RefundRows
 */
Refund.prototype['RefundRows'] = undefined;

/**
 * List of order rows belonging to this refund.
 * @member {Array.<module:model/RefundCoreModelsOrderOrderRow>} Rows
 */
Refund.prototype['Rows'] = undefined;






export default Refund;

