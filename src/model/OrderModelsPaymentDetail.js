/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderModelsPaymentDetail model module.
 * @module model/OrderModelsPaymentDetail
 * @version v1.7.1
 */
class OrderModelsPaymentDetail {
    /**
     * Constructs a new <code>OrderModelsPaymentDetail</code>.
     * Data carrier for a payment detail
     * @alias module:model/OrderModelsPaymentDetail
     */
    constructor() { 
        
        OrderModelsPaymentDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderModelsPaymentDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderModelsPaymentDetail} obj Optional instance to populate.
     * @return {module:model/OrderModelsPaymentDetail} The populated <code>OrderModelsPaymentDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderModelsPaymentDetail();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('PaymentId')) {
                obj['PaymentId'] = ApiClient.convertToType(data['PaymentId'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('DisplayName')) {
                obj['DisplayName'] = ApiClient.convertToType(data['DisplayName'], 'String');
            }
            if (data.hasOwnProperty('TransactionId')) {
                obj['TransactionId'] = ApiClient.convertToType(data['TransactionId'], 'String');
            }
            if (data.hasOwnProperty('SecondaryTransactionId')) {
                obj['SecondaryTransactionId'] = ApiClient.convertToType(data['SecondaryTransactionId'], 'String');
            }
            if (data.hasOwnProperty('ReservationNumber')) {
                obj['ReservationNumber'] = ApiClient.convertToType(data['ReservationNumber'], 'String');
            }
            if (data.hasOwnProperty('ReservationDate')) {
                obj['ReservationDate'] = ApiClient.convertToType(data['ReservationDate'], 'Date');
            }
            if (data.hasOwnProperty('PaymentDate')) {
                obj['PaymentDate'] = ApiClient.convertToType(data['PaymentDate'], 'Date');
            }
            if (data.hasOwnProperty('Total')) {
                obj['Total'] = ApiClient.convertToType(data['Total'], 'Number');
            }
            if (data.hasOwnProperty('Payed')) {
                obj['Payed'] = ApiClient.convertToType(data['Payed'], 'Boolean');
            }
            if (data.hasOwnProperty('PaymentFee')) {
                obj['PaymentFee'] = ApiClient.convertToType(data['PaymentFee'], 'Number');
            }
            if (data.hasOwnProperty('ShippingFee')) {
                obj['ShippingFee'] = ApiClient.convertToType(data['ShippingFee'], 'Number');
            }
            if (data.hasOwnProperty('PaymentOption')) {
                obj['PaymentOption'] = ApiClient.convertToType(data['PaymentOption'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderModelsPaymentDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderModelsPaymentDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['DisplayName'] && !(typeof data['DisplayName'] === 'string' || data['DisplayName'] instanceof String)) {
            throw new Error("Expected the field `DisplayName` to be a primitive type in the JSON string but got " + data['DisplayName']);
        }
        // ensure the json data is a string
        if (data['TransactionId'] && !(typeof data['TransactionId'] === 'string' || data['TransactionId'] instanceof String)) {
            throw new Error("Expected the field `TransactionId` to be a primitive type in the JSON string but got " + data['TransactionId']);
        }
        // ensure the json data is a string
        if (data['SecondaryTransactionId'] && !(typeof data['SecondaryTransactionId'] === 'string' || data['SecondaryTransactionId'] instanceof String)) {
            throw new Error("Expected the field `SecondaryTransactionId` to be a primitive type in the JSON string but got " + data['SecondaryTransactionId']);
        }
        // ensure the json data is a string
        if (data['ReservationNumber'] && !(typeof data['ReservationNumber'] === 'string' || data['ReservationNumber'] instanceof String)) {
            throw new Error("Expected the field `ReservationNumber` to be a primitive type in the JSON string but got " + data['ReservationNumber']);
        }
        // ensure the json data is a string
        if (data['PaymentOption'] && !(typeof data['PaymentOption'] === 'string' || data['PaymentOption'] instanceof String)) {
            throw new Error("Expected the field `PaymentOption` to be a primitive type in the JSON string but got " + data['PaymentOption']);
        }

        return true;
    }


}



/**
 * Unique identifier for this payment detail. Exception: For some payment options this field can be 0. These orders only have one payment detail.
 * @member {Number} Id
 */
OrderModelsPaymentDetail.prototype['Id'] = undefined;

/**
 * Payment method id
 * @member {Number} PaymentId
 */
OrderModelsPaymentDetail.prototype['PaymentId'] = undefined;

/**
 * The name of the payment method
 * @member {String} Name
 */
OrderModelsPaymentDetail.prototype['Name'] = undefined;

/**
 * The display name of the payment method
 * @member {String} DisplayName
 */
OrderModelsPaymentDetail.prototype['DisplayName'] = undefined;

/**
 * The transaction id (external reference).
 * @member {String} TransactionId
 */
OrderModelsPaymentDetail.prototype['TransactionId'] = undefined;

/**
 * The secondary transaction id, if any (external reference).
 * @member {String} SecondaryTransactionId
 */
OrderModelsPaymentDetail.prototype['SecondaryTransactionId'] = undefined;

/**
 * The reservation number. This field is not available for all payment methods.
 * @member {String} ReservationNumber
 */
OrderModelsPaymentDetail.prototype['ReservationNumber'] = undefined;

/**
 * Reservation date
 * @member {Date} ReservationDate
 */
OrderModelsPaymentDetail.prototype['ReservationDate'] = undefined;

/**
 * Payment date
 * @member {Date} PaymentDate
 */
OrderModelsPaymentDetail.prototype['PaymentDate'] = undefined;

/**
 * Total
 * @member {Number} Total
 */
OrderModelsPaymentDetail.prototype['Total'] = undefined;

/**
 * Shows if the order is paid using this payment method
 * @member {Boolean} Payed
 */
OrderModelsPaymentDetail.prototype['Payed'] = undefined;

/**
 * The payment fee
 * @member {Number} PaymentFee
 */
OrderModelsPaymentDetail.prototype['PaymentFee'] = undefined;

/**
 * The shipping fee
 * @member {Number} ShippingFee
 */
OrderModelsPaymentDetail.prototype['ShippingFee'] = undefined;

/**
 * The name of the payment option, if any.  This doesn't have to be the same as the payment name. Eg \"Direct bank payment\", \"Card\", \"Invoice\" etc.
 * @member {String} PaymentOption
 */
OrderModelsPaymentDetail.prototype['PaymentOption'] = undefined;






export default OrderModelsPaymentDetail;

