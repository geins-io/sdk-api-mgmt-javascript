/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PageResult model module.
 * @module model/PageResult
 * @version v1.7.1
 */
class PageResult {
    /**
     * Constructs a new <code>PageResult</code>.
     * Contains pagination information for paged operations, i.e. PageSize and PageCount.
     * @alias module:model/PageResult
     */
    constructor() { 
        
        PageResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PageResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageResult} obj Optional instance to populate.
     * @return {module:model/PageResult} The populated <code>PageResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageResult();

            if (data.hasOwnProperty('BatchId')) {
                obj['BatchId'] = ApiClient.convertToType(data['BatchId'], 'String');
            }
            if (data.hasOwnProperty('Page')) {
                obj['Page'] = ApiClient.convertToType(data['Page'], 'Number');
            }
            if (data.hasOwnProperty('RowCount')) {
                obj['RowCount'] = ApiClient.convertToType(data['RowCount'], 'Number');
            }
            if (data.hasOwnProperty('PageCount')) {
                obj['PageCount'] = ApiClient.convertToType(data['PageCount'], 'Number');
            }
            if (data.hasOwnProperty('PageSize')) {
                obj['PageSize'] = ApiClient.convertToType(data['PageSize'], 'Number');
            }
            if (data.hasOwnProperty('HasMoreRows')) {
                obj['HasMoreRows'] = ApiClient.convertToType(data['HasMoreRows'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BatchId'] && !(typeof data['BatchId'] === 'string' || data['BatchId'] instanceof String)) {
            throw new Error("Expected the field `BatchId` to be a primitive type in the JSON string but got " + data['BatchId']);
        }

        return true;
    }


}



/**
 * The id of the batch operation. If this property has a value for the first fetched page it has to be passed as a parameter for all subsequent requests-
 * @member {String} BatchId
 */
PageResult.prototype['BatchId'] = undefined;

/**
 * The current page
 * @member {Number} Page
 */
PageResult.prototype['Page'] = undefined;

/**
 * Total number of rows
 * @member {Number} RowCount
 */
PageResult.prototype['RowCount'] = undefined;

/**
 * Total number of pages
 * @member {Number} PageCount
 */
PageResult.prototype['PageCount'] = undefined;

/**
 * Page size
 * @member {Number} PageSize
 */
PageResult.prototype['PageSize'] = undefined;

/**
 * True if there is more content to fetch.
 * @member {Boolean} HasMoreRows
 */
PageResult.prototype['HasMoreRows'] = undefined;






export default PageResult;

