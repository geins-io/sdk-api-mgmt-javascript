/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RefundQuery model module.
 * @module model/RefundQuery
 * @version v1.10.1
 */
class RefundQuery {
    /**
     * Constructs a new <code>RefundQuery</code>.
     * Defines a query used to filter refunds.   All properties are optional.
     * @alias module:model/RefundQuery
     */
    constructor() { 
        
        RefundQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RefundQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RefundQuery} obj Optional instance to populate.
     * @return {module:model/RefundQuery} The populated <code>RefundQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RefundQuery();

            if (data.hasOwnProperty('CreatedAfter')) {
                obj['CreatedAfter'] = ApiClient.convertToType(data['CreatedAfter'], 'Date');
            }
            if (data.hasOwnProperty('CreatedBefore')) {
                obj['CreatedBefore'] = ApiClient.convertToType(data['CreatedBefore'], 'Date');
            }
            if (data.hasOwnProperty('ApprovedAfter')) {
                obj['ApprovedAfter'] = ApiClient.convertToType(data['ApprovedAfter'], 'Date');
            }
            if (data.hasOwnProperty('ApprovedBefore')) {
                obj['ApprovedBefore'] = ApiClient.convertToType(data['ApprovedBefore'], 'Date');
            }
            if (data.hasOwnProperty('UpdatedAfter')) {
                obj['UpdatedAfter'] = ApiClient.convertToType(data['UpdatedAfter'], 'Date');
            }
            if (data.hasOwnProperty('UpdatedBefore')) {
                obj['UpdatedBefore'] = ApiClient.convertToType(data['UpdatedBefore'], 'Date');
            }
            if (data.hasOwnProperty('IncludeStatuses')) {
                obj['IncludeStatuses'] = ApiClient.convertToType(data['IncludeStatuses'], ['Number']);
            }
            if (data.hasOwnProperty('ExcludeStatuses')) {
                obj['ExcludeStatuses'] = ApiClient.convertToType(data['ExcludeStatuses'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RefundQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RefundQuery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['IncludeStatuses'])) {
            throw new Error("Expected the field `IncludeStatuses` to be an array in the JSON data but got " + data['IncludeStatuses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ExcludeStatuses'])) {
            throw new Error("Expected the field `ExcludeStatuses` to be an array in the JSON data but got " + data['ExcludeStatuses']);
        }

        return true;
    }


}



/**
 * Limits refunds to those created after this date.
 * @member {Date} CreatedAfter
 */
RefundQuery.prototype['CreatedAfter'] = undefined;

/**
 * Limits refunds to those created before this date.
 * @member {Date} CreatedBefore
 */
RefundQuery.prototype['CreatedBefore'] = undefined;

/**
 * Limits refunds to those approved after this date.
 * @member {Date} ApprovedAfter
 */
RefundQuery.prototype['ApprovedAfter'] = undefined;

/**
 * Limits refunds to those approved before this date.
 * @member {Date} ApprovedBefore
 */
RefundQuery.prototype['ApprovedBefore'] = undefined;

/**
 * Limits refunds to those updated after this date.
 * @member {Date} UpdatedAfter
 */
RefundQuery.prototype['UpdatedAfter'] = undefined;

/**
 * Limits refunds to those updated before this date.
 * @member {Date} UpdatedBefore
 */
RefundQuery.prototype['UpdatedBefore'] = undefined;

/**
 * Limits refunds to only those with any of the specified statuses.  0 = All. Include all statuses.  1 = Sent. Include refunds marked as sent.  2 = Settled. Include refunds marked as settled.  3 = SettledManually. Include refunds marked as manually settled.  4 = Processed. Include refunds marked as processed.  5 = Investigation. Include refunds marked for investigation.  6 = Pending approval. Include refunds that are pending approval.  7 = Approved. Include refunds that are approved.  Defaults to All if not set.
 * @member {Array.<module:model/RefundQuery.IncludeStatusesEnum>} IncludeStatuses
 */
RefundQuery.prototype['IncludeStatuses'] = undefined;

/**
 * Limits refunds to only those without any of the specified statuses.  1 = Sent. Exclude refunds marked as sent.  2 = Settled. Exclude refunds marked as settled.  3 = SettledManually. Exclude refunds marked as manually settled.  4 = Processed. Exclude refunds marked as processed.  5 = Investigation. Exclude refunds marked for investigation.  6 = Pending approval. Exclude refunds that are pending approval.  7 = Approved. Exclude refunds that are approved.  O or All is not valid as an exclude status and will not apply.
 * @member {Array.<module:model/RefundQuery.ExcludeStatusesEnum>} ExcludeStatuses
 */
RefundQuery.prototype['ExcludeStatuses'] = undefined;





/**
 * Allowed values for the <code>includeStatuses</code> property.
 * @enum {Number}
 * @readonly
 */
RefundQuery['IncludeStatusesEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6,

    /**
     * value: 7
     * @const
     */
    "7": 7
};


/**
 * Allowed values for the <code>excludeStatuses</code> property.
 * @enum {Number}
 * @readonly
 */
RefundQuery['ExcludeStatusesEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6,

    /**
     * value: 7
     * @const
     */
    "7": 7
};



export default RefundQuery;

