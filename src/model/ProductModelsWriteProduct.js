/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MarketModelsMarket from './MarketModelsMarket';
import ProductModelsWriteProductItem from './ProductModelsWriteProductItem';
import ProductParameterModelsWriteProductParameterValue from './ProductParameterModelsWriteProductParameterValue';
import SharedModelsLocalizableContent from './SharedModelsLocalizableContent';
import VariantModelsWriteVariant from './VariantModelsWriteVariant';

/**
 * The ProductModelsWriteProduct model module.
 * @module model/ProductModelsWriteProduct
 * @version v1.7.1
 */
class ProductModelsWriteProduct {
    /**
     * Constructs a new <code>ProductModelsWriteProduct</code>.
     * A product.
     * @alias module:model/ProductModelsWriteProduct
     */
    constructor() { 
        
        ProductModelsWriteProduct.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductModelsWriteProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductModelsWriteProduct} obj Optional instance to populate.
     * @return {module:model/ProductModelsWriteProduct} The populated <code>ProductModelsWriteProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductModelsWriteProduct();

            if (data.hasOwnProperty('ArticleNumber')) {
                obj['ArticleNumber'] = ApiClient.convertToType(data['ArticleNumber'], 'String');
            }
            if (data.hasOwnProperty('Names')) {
                obj['Names'] = ApiClient.convertToType(data['Names'], [SharedModelsLocalizableContent]);
            }
            if (data.hasOwnProperty('Active')) {
                obj['Active'] = ApiClient.convertToType(data['Active'], 'Boolean');
            }
            if (data.hasOwnProperty('PurchasePrice')) {
                obj['PurchasePrice'] = ApiClient.convertToType(data['PurchasePrice'], 'Number');
            }
            if (data.hasOwnProperty('PurchasePriceCurrency')) {
                obj['PurchasePriceCurrency'] = ApiClient.convertToType(data['PurchasePriceCurrency'], 'String');
            }
            if (data.hasOwnProperty('ShortTexts')) {
                obj['ShortTexts'] = ApiClient.convertToType(data['ShortTexts'], [SharedModelsLocalizableContent]);
            }
            if (data.hasOwnProperty('LongTexts')) {
                obj['LongTexts'] = ApiClient.convertToType(data['LongTexts'], [SharedModelsLocalizableContent]);
            }
            if (data.hasOwnProperty('TechTexts')) {
                obj['TechTexts'] = ApiClient.convertToType(data['TechTexts'], [SharedModelsLocalizableContent]);
            }
            if (data.hasOwnProperty('BrandId')) {
                obj['BrandId'] = ApiClient.convertToType(data['BrandId'], 'Number');
            }
            if (data.hasOwnProperty('SupplierId')) {
                obj['SupplierId'] = ApiClient.convertToType(data['SupplierId'], 'Number');
            }
            if (data.hasOwnProperty('Items')) {
                obj['Items'] = ApiClient.convertToType(data['Items'], [ProductModelsWriteProductItem]);
            }
            if (data.hasOwnProperty('CategoryIds')) {
                obj['CategoryIds'] = ApiClient.convertToType(data['CategoryIds'], ['Number']);
            }
            if (data.hasOwnProperty('ParameterValues')) {
                obj['ParameterValues'] = ApiClient.convertToType(data['ParameterValues'], [ProductParameterModelsWriteProductParameterValue]);
            }
            if (data.hasOwnProperty('Variants')) {
                obj['Variants'] = ApiClient.convertToType(data['Variants'], [VariantModelsWriteVariant]);
            }
            if (data.hasOwnProperty('Markets')) {
                obj['Markets'] = ApiClient.convertToType(data['Markets'], [MarketModelsMarket]);
            }
            if (data.hasOwnProperty('FreightClassId')) {
                obj['FreightClassId'] = ApiClient.convertToType(data['FreightClassId'], 'Number');
            }
            if (data.hasOwnProperty('IntrastatCode')) {
                obj['IntrastatCode'] = ApiClient.convertToType(data['IntrastatCode'], 'String');
            }
            if (data.hasOwnProperty('CountryOfOrigin')) {
                obj['CountryOfOrigin'] = ApiClient.convertToType(data['CountryOfOrigin'], 'String');
            }
            if (data.hasOwnProperty('VariantGroupId')) {
                obj['VariantGroupId'] = ApiClient.convertToType(data['VariantGroupId'], 'Number');
            }
            if (data.hasOwnProperty('Vat')) {
                obj['Vat'] = ApiClient.convertToType(data['Vat'], 'Number');
            }
            if (data.hasOwnProperty('VatType')) {
                obj['VatType'] = ApiClient.convertToType(data['VatType'], 'String');
            }
            if (data.hasOwnProperty('ExternalId')) {
                obj['ExternalId'] = ApiClient.convertToType(data['ExternalId'], 'String');
            }
            if (data.hasOwnProperty('ActivationDate')) {
                obj['ActivationDate'] = ApiClient.convertToType(data['ActivationDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductModelsWriteProduct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductModelsWriteProduct</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ArticleNumber'] && !(typeof data['ArticleNumber'] === 'string' || data['ArticleNumber'] instanceof String)) {
            throw new Error("Expected the field `ArticleNumber` to be a primitive type in the JSON string but got " + data['ArticleNumber']);
        }
        if (data['Names']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Names'])) {
                throw new Error("Expected the field `Names` to be an array in the JSON data but got " + data['Names']);
            }
            // validate the optional field `Names` (array)
            for (const item of data['Names']) {
                SharedModelsLocalizableContent.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['PurchasePriceCurrency'] && !(typeof data['PurchasePriceCurrency'] === 'string' || data['PurchasePriceCurrency'] instanceof String)) {
            throw new Error("Expected the field `PurchasePriceCurrency` to be a primitive type in the JSON string but got " + data['PurchasePriceCurrency']);
        }
        if (data['ShortTexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ShortTexts'])) {
                throw new Error("Expected the field `ShortTexts` to be an array in the JSON data but got " + data['ShortTexts']);
            }
            // validate the optional field `ShortTexts` (array)
            for (const item of data['ShortTexts']) {
                SharedModelsLocalizableContent.validateJsonObject(item);
            };
        }
        if (data['LongTexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LongTexts'])) {
                throw new Error("Expected the field `LongTexts` to be an array in the JSON data but got " + data['LongTexts']);
            }
            // validate the optional field `LongTexts` (array)
            for (const item of data['LongTexts']) {
                SharedModelsLocalizableContent.validateJsonObject(item);
            };
        }
        if (data['TechTexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TechTexts'])) {
                throw new Error("Expected the field `TechTexts` to be an array in the JSON data but got " + data['TechTexts']);
            }
            // validate the optional field `TechTexts` (array)
            for (const item of data['TechTexts']) {
                SharedModelsLocalizableContent.validateJsonObject(item);
            };
        }
        if (data['Items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Items'])) {
                throw new Error("Expected the field `Items` to be an array in the JSON data but got " + data['Items']);
            }
            // validate the optional field `Items` (array)
            for (const item of data['Items']) {
                ProductModelsWriteProductItem.validateJsonObject(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['CategoryIds'])) {
            throw new Error("Expected the field `CategoryIds` to be an array in the JSON data but got " + data['CategoryIds']);
        }
        if (data['ParameterValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ParameterValues'])) {
                throw new Error("Expected the field `ParameterValues` to be an array in the JSON data but got " + data['ParameterValues']);
            }
            // validate the optional field `ParameterValues` (array)
            for (const item of data['ParameterValues']) {
                ProductParameterModelsWriteProductParameterValue.validateJsonObject(item);
            };
        }
        if (data['Variants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Variants'])) {
                throw new Error("Expected the field `Variants` to be an array in the JSON data but got " + data['Variants']);
            }
            // validate the optional field `Variants` (array)
            for (const item of data['Variants']) {
                VariantModelsWriteVariant.validateJsonObject(item);
            };
        }
        if (data['Markets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Markets'])) {
                throw new Error("Expected the field `Markets` to be an array in the JSON data but got " + data['Markets']);
            }
            // validate the optional field `Markets` (array)
            for (const item of data['Markets']) {
                MarketModelsMarket.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['IntrastatCode'] && !(typeof data['IntrastatCode'] === 'string' || data['IntrastatCode'] instanceof String)) {
            throw new Error("Expected the field `IntrastatCode` to be a primitive type in the JSON string but got " + data['IntrastatCode']);
        }
        // ensure the json data is a string
        if (data['CountryOfOrigin'] && !(typeof data['CountryOfOrigin'] === 'string' || data['CountryOfOrigin'] instanceof String)) {
            throw new Error("Expected the field `CountryOfOrigin` to be a primitive type in the JSON string but got " + data['CountryOfOrigin']);
        }
        // ensure the json data is a string
        if (data['VatType'] && !(typeof data['VatType'] === 'string' || data['VatType'] instanceof String)) {
            throw new Error("Expected the field `VatType` to be a primitive type in the JSON string but got " + data['VatType']);
        }
        // ensure the json data is a string
        if (data['ExternalId'] && !(typeof data['ExternalId'] === 'string' || data['ExternalId'] instanceof String)) {
            throw new Error("Expected the field `ExternalId` to be a primitive type in the JSON string but got " + data['ExternalId']);
        }

        return true;
    }


}



/**
 * The article number of the product.
 * @member {String} ArticleNumber
 */
ProductModelsWriteProduct.prototype['ArticleNumber'] = undefined;

/**
 * The localized names of the product.
 * @member {Array.<module:model/SharedModelsLocalizableContent>} Names
 */
ProductModelsWriteProduct.prototype['Names'] = undefined;

/**
 * The current state of the product.
 * @member {Boolean} Active
 */
ProductModelsWriteProduct.prototype['Active'] = undefined;

/**
 * The purchase price in the currency defined in {Product.Models.Write.Product.PurchasePriceCurrency}.
 * @member {Number} PurchasePrice
 */
ProductModelsWriteProduct.prototype['PurchasePrice'] = undefined;

/**
 * The 3-letter ISO 4217 currency code for the amount given in {Product.Models.Write.Product.PurchasePrice}.
 * @member {String} PurchasePriceCurrency
 */
ProductModelsWriteProduct.prototype['PurchasePriceCurrency'] = undefined;

/**
 * Localized short texts for the product.
 * @member {Array.<module:model/SharedModelsLocalizableContent>} ShortTexts
 */
ProductModelsWriteProduct.prototype['ShortTexts'] = undefined;

/**
 * Localized long texts for the product.
 * @member {Array.<module:model/SharedModelsLocalizableContent>} LongTexts
 */
ProductModelsWriteProduct.prototype['LongTexts'] = undefined;

/**
 * Localized tech texts for the product.
 * @member {Array.<module:model/SharedModelsLocalizableContent>} TechTexts
 */
ProductModelsWriteProduct.prototype['TechTexts'] = undefined;

/**
 * The brand of the product.
 * @member {Number} BrandId
 */
ProductModelsWriteProduct.prototype['BrandId'] = undefined;

/**
 * The supplier id of the product.
 * @member {Number} SupplierId
 */
ProductModelsWriteProduct.prototype['SupplierId'] = undefined;

/**
 * The items belonging to the product.
 * @member {Array.<module:model/ProductModelsWriteProductItem>} Items
 */
ProductModelsWriteProduct.prototype['Items'] = undefined;

/**
 * The category ids the product belongs to.
 * @member {Array.<Number>} CategoryIds
 */
ProductModelsWriteProduct.prototype['CategoryIds'] = undefined;

/**
 * The parameter values associated with the product.
 * @member {Array.<module:model/ProductParameterModelsWriteProductParameterValue>} ParameterValues
 */
ProductModelsWriteProduct.prototype['ParameterValues'] = undefined;

/**
 * The variants for this product.
 * @member {Array.<module:model/VariantModelsWriteVariant>} Variants
 */
ProductModelsWriteProduct.prototype['Variants'] = undefined;

/**
 * The markets for this product
 * @member {Array.<module:model/MarketModelsMarket>} Markets
 */
ProductModelsWriteProduct.prototype['Markets'] = undefined;

/**
 * ID of freight class
 * @member {Number} FreightClassId
 */
ProductModelsWriteProduct.prototype['FreightClassId'] = undefined;

/**
 * Intrastat code of the product
 * @member {String} IntrastatCode
 */
ProductModelsWriteProduct.prototype['IntrastatCode'] = undefined;

/**
 * Country of orgin of product
 * @member {String} CountryOfOrigin
 */
ProductModelsWriteProduct.prototype['CountryOfOrigin'] = undefined;

/**
 * ID of Variant Group to whom the product should be associated
 * @member {Number} VariantGroupId
 */
ProductModelsWriteProduct.prototype['VariantGroupId'] = undefined;

/**
 * ID or rate of VAT (On create and if no VAT is provided then default VAT will be used)
 * @member {Number} Vat
 */
ProductModelsWriteProduct.prototype['Vat'] = undefined;

/**
 * Defines how VAT parameter should be interpreted  Actual = VAT parameter is interpreted as VAT rate  VatId = VAT parameter is interpreted as VAT Id
 * @member {String} VatType
 */
ProductModelsWriteProduct.prototype['VatType'] = undefined;

/**
 * External Id of the product.
 * @member {String} ExternalId
 */
ProductModelsWriteProduct.prototype['ExternalId'] = undefined;

/**
 * Activation date for the product.
 * @member {Date} ActivationDate
 */
ProductModelsWriteProduct.prototype['ActivationDate'] = undefined;






export default ProductModelsWriteProduct;

