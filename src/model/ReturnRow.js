/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReturnRow model module.
 * @module model/ReturnRow
 * @version v1.10.1
 */
class ReturnRow {
    /**
     * Constructs a new <code>ReturnRow</code>.
     * A return row.
     * @alias module:model/ReturnRow
     */
    constructor() { 
        
        ReturnRow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReturnRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnRow} obj Optional instance to populate.
     * @return {module:model/ReturnRow} The populated <code>ReturnRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnRow();

            if (data.hasOwnProperty('ReturnId')) {
                obj['ReturnId'] = ApiClient.convertToType(data['ReturnId'], 'Number');
            }
            if (data.hasOwnProperty('ReturnRowId')) {
                obj['ReturnRowId'] = ApiClient.convertToType(data['ReturnRowId'], 'Number');
            }
            if (data.hasOwnProperty('OrderRowId')) {
                obj['OrderRowId'] = ApiClient.convertToType(data['OrderRowId'], 'Number');
            }
            if (data.hasOwnProperty('ReturnCode')) {
                obj['ReturnCode'] = ApiClient.convertToType(data['ReturnCode'], 'Number');
            }
            if (data.hasOwnProperty('ReturnAction')) {
                obj['ReturnAction'] = ApiClient.convertToType(data['ReturnAction'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnRow</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The return id that this return row belongs to.
 * @member {Number} ReturnId
 */
ReturnRow.prototype['ReturnId'] = undefined;

/**
 * The id of this return row.
 * @member {Number} ReturnRowId
 */
ReturnRow.prototype['ReturnRowId'] = undefined;

/**
 * The order row is that this return row belongs to.
 * @member {Number} OrderRowId
 */
ReturnRow.prototype['OrderRowId'] = undefined;

/**
 * The return code for this return row.
 * @member {Number} ReturnCode
 */
ReturnRow.prototype['ReturnCode'] = undefined;

/**
 * The action taken for this return row.  1 = Investigate. The return row is refunded, but is marked for investigation.  2 = NoRefund. No refund is made for the return row.  3 = RegularRefund. The return row is refunded normally.  4 = RefundToBalance. The return row is refunded to the customer's balance.    1 = Investigate. The return row is refunded, but is marked for investigation.    2 = NoRefund. No refund is made for the return row.    3 = RegularRefund. The return row is refunded normally.    4 = RefundToBalance. The return row is refunded to the customer's balance.
 * @member {module:model/ReturnRow.ReturnActionEnum} ReturnAction
 */
ReturnRow.prototype['ReturnAction'] = undefined;





/**
 * Allowed values for the <code>ReturnAction</code> property.
 * @enum {Number}
 * @readonly
 */
ReturnRow['ReturnActionEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4
};



export default ReturnRow;

