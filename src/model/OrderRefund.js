/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderRefundRow from './OrderRefundRow';

/**
 * The OrderRefund model module.
 * @module model/OrderRefund
 * @version v1.7.1
 */
class OrderRefund {
    /**
     * Constructs a new <code>OrderRefund</code>.
     * @alias module:model/OrderRefund
     */
    constructor() { 
        
        OrderRefund.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderRefund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderRefund} obj Optional instance to populate.
     * @return {module:model/OrderRefund} The populated <code>OrderRefund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderRefund();

            if (data.hasOwnProperty('RefundId')) {
                obj['RefundId'] = ApiClient.convertToType(data['RefundId'], 'String');
            }
            if (data.hasOwnProperty('RefundInstanceId')) {
                obj['RefundInstanceId'] = ApiClient.convertToType(data['RefundInstanceId'], 'Number');
            }
            if (data.hasOwnProperty('OrderId')) {
                obj['OrderId'] = ApiClient.convertToType(data['OrderId'], 'Number');
            }
            if (data.hasOwnProperty('ExternalOrderId')) {
                obj['ExternalOrderId'] = ApiClient.convertToType(data['ExternalOrderId'], 'String');
            }
            if (data.hasOwnProperty('ExternalId')) {
                obj['ExternalId'] = ApiClient.convertToType(data['ExternalId'], 'String');
            }
            if (data.hasOwnProperty('Reference')) {
                obj['Reference'] = ApiClient.convertToType(data['Reference'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('ProcessedOn')) {
                obj['ProcessedOn'] = ApiClient.convertToType(data['ProcessedOn'], 'Date');
            }
            if (data.hasOwnProperty('RefundedItemTotal')) {
                obj['RefundedItemTotal'] = ApiClient.convertToType(data['RefundedItemTotal'], 'Number');
            }
            if (data.hasOwnProperty('RefundedShippingFee')) {
                obj['RefundedShippingFee'] = ApiClient.convertToType(data['RefundedShippingFee'], 'Number');
            }
            if (data.hasOwnProperty('RefundedPaymentFee')) {
                obj['RefundedPaymentFee'] = ApiClient.convertToType(data['RefundedPaymentFee'], 'Number');
            }
            if (data.hasOwnProperty('RefundedDiscount')) {
                obj['RefundedDiscount'] = ApiClient.convertToType(data['RefundedDiscount'], 'Number');
            }
            if (data.hasOwnProperty('RefundedBalance')) {
                obj['RefundedBalance'] = ApiClient.convertToType(data['RefundedBalance'], 'Number');
            }
            if (data.hasOwnProperty('VatRate')) {
                obj['VatRate'] = ApiClient.convertToType(data['VatRate'], 'Number');
            }
            if (data.hasOwnProperty('PaymentName')) {
                obj['PaymentName'] = ApiClient.convertToType(data['PaymentName'], 'String');
            }
            if (data.hasOwnProperty('Locale')) {
                obj['Locale'] = ApiClient.convertToType(data['Locale'], 'String');
            }
            if (data.hasOwnProperty('Rows')) {
                obj['Rows'] = ApiClient.convertToType(data['Rows'], [OrderRefundRow]);
            }
            if (data.hasOwnProperty('OrderTransactionId')) {
                obj['OrderTransactionId'] = ApiClient.convertToType(data['OrderTransactionId'], 'String');
            }
            if (data.hasOwnProperty('SecondaryOrderTransactionId')) {
                obj['SecondaryOrderTransactionId'] = ApiClient.convertToType(data['SecondaryOrderTransactionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderRefund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderRefund</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['RefundId'] && !(typeof data['RefundId'] === 'string' || data['RefundId'] instanceof String)) {
            throw new Error("Expected the field `RefundId` to be a primitive type in the JSON string but got " + data['RefundId']);
        }
        // ensure the json data is a string
        if (data['ExternalOrderId'] && !(typeof data['ExternalOrderId'] === 'string' || data['ExternalOrderId'] instanceof String)) {
            throw new Error("Expected the field `ExternalOrderId` to be a primitive type in the JSON string but got " + data['ExternalOrderId']);
        }
        // ensure the json data is a string
        if (data['ExternalId'] && !(typeof data['ExternalId'] === 'string' || data['ExternalId'] instanceof String)) {
            throw new Error("Expected the field `ExternalId` to be a primitive type in the JSON string but got " + data['ExternalId']);
        }
        // ensure the json data is a string
        if (data['Reference'] && !(typeof data['Reference'] === 'string' || data['Reference'] instanceof String)) {
            throw new Error("Expected the field `Reference` to be a primitive type in the JSON string but got " + data['Reference']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['PaymentName'] && !(typeof data['PaymentName'] === 'string' || data['PaymentName'] instanceof String)) {
            throw new Error("Expected the field `PaymentName` to be a primitive type in the JSON string but got " + data['PaymentName']);
        }
        // ensure the json data is a string
        if (data['Locale'] && !(typeof data['Locale'] === 'string' || data['Locale'] instanceof String)) {
            throw new Error("Expected the field `Locale` to be a primitive type in the JSON string but got " + data['Locale']);
        }
        if (data['Rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Rows'])) {
                throw new Error("Expected the field `Rows` to be an array in the JSON data but got " + data['Rows']);
            }
            // validate the optional field `Rows` (array)
            for (const item of data['Rows']) {
                OrderRefundRow.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['OrderTransactionId'] && !(typeof data['OrderTransactionId'] === 'string' || data['OrderTransactionId'] instanceof String)) {
            throw new Error("Expected the field `OrderTransactionId` to be a primitive type in the JSON string but got " + data['OrderTransactionId']);
        }
        // ensure the json data is a string
        if (data['SecondaryOrderTransactionId'] && !(typeof data['SecondaryOrderTransactionId'] === 'string' || data['SecondaryOrderTransactionId'] instanceof String)) {
            throw new Error("Expected the field `SecondaryOrderTransactionId` to be a primitive type in the JSON string but got " + data['SecondaryOrderTransactionId']);
        }

        return true;
    }


}



/**
 * @member {String} RefundId
 */
OrderRefund.prototype['RefundId'] = undefined;

/**
 * @member {Number} RefundInstanceId
 */
OrderRefund.prototype['RefundInstanceId'] = undefined;

/**
 * @member {Number} OrderId
 */
OrderRefund.prototype['OrderId'] = undefined;

/**
 * @member {String} ExternalOrderId
 */
OrderRefund.prototype['ExternalOrderId'] = undefined;

/**
 * @member {String} ExternalId
 */
OrderRefund.prototype['ExternalId'] = undefined;

/**
 * @member {String} Reference
 */
OrderRefund.prototype['Reference'] = undefined;

/**
 * @member {String} Description
 */
OrderRefund.prototype['Description'] = undefined;

/**
 * @member {Date} ProcessedOn
 */
OrderRefund.prototype['ProcessedOn'] = undefined;

/**
 * @member {Number} RefundedItemTotal
 */
OrderRefund.prototype['RefundedItemTotal'] = undefined;

/**
 * @member {Number} RefundedShippingFee
 */
OrderRefund.prototype['RefundedShippingFee'] = undefined;

/**
 * @member {Number} RefundedPaymentFee
 */
OrderRefund.prototype['RefundedPaymentFee'] = undefined;

/**
 * @member {Number} RefundedDiscount
 */
OrderRefund.prototype['RefundedDiscount'] = undefined;

/**
 * @member {Number} RefundedBalance
 */
OrderRefund.prototype['RefundedBalance'] = undefined;

/**
 * @member {Number} VatRate
 */
OrderRefund.prototype['VatRate'] = undefined;

/**
 * @member {String} PaymentName
 */
OrderRefund.prototype['PaymentName'] = undefined;

/**
 * @member {String} Locale
 */
OrderRefund.prototype['Locale'] = undefined;

/**
 * @member {Array.<module:model/OrderRefundRow>} Rows
 */
OrderRefund.prototype['Rows'] = undefined;

/**
 * @member {String} OrderTransactionId
 */
OrderRefund.prototype['OrderTransactionId'] = undefined;

/**
 * @member {String} SecondaryOrderTransactionId
 */
OrderRefund.prototype['SecondaryOrderTransactionId'] = undefined;






export default OrderRefund;

