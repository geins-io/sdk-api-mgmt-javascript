/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PageAreaModelsReadPageWidget model module.
 * @module model/PageAreaModelsReadPageWidget
 * @version v1.7.1
 */
class PageAreaModelsReadPageWidget {
    /**
     * Constructs a new <code>PageAreaModelsReadPageWidget</code>.
     * The API-representation of page widgets
     * @alias module:model/PageAreaModelsReadPageWidget
     */
    constructor() { 
        
        PageAreaModelsReadPageWidget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PageAreaModelsReadPageWidget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageAreaModelsReadPageWidget} obj Optional instance to populate.
     * @return {module:model/PageAreaModelsReadPageWidget} The populated <code>PageAreaModelsReadPageWidget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageAreaModelsReadPageWidget();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Active')) {
                obj['Active'] = ApiClient.convertToType(data['Active'], 'Boolean');
            }
            if (data.hasOwnProperty('ClassNames')) {
                obj['ClassNames'] = ApiClient.convertToType(data['ClassNames'], ['String']);
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'String');
            }
            if (data.hasOwnProperty('Configuration')) {
                obj['Configuration'] = ApiClient.convertToType(data['Configuration'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageAreaModelsReadPageWidget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageAreaModelsReadPageWidget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ClassNames'])) {
            throw new Error("Expected the field `ClassNames` to be an array in the JSON data but got " + data['ClassNames']);
        }
        // ensure the json data is a string
        if (data['Size'] && !(typeof data['Size'] === 'string' || data['Size'] instanceof String)) {
            throw new Error("Expected the field `Size` to be a primitive type in the JSON string but got " + data['Size']);
        }
        // ensure the json data is a string
        if (data['Configuration'] && !(typeof data['Configuration'] === 'string' || data['Configuration'] instanceof String)) {
            throw new Error("Expected the field `Configuration` to be a primitive type in the JSON string but got " + data['Configuration']);
        }

        return true;
    }


}



/**
 * The IDs of widgets are immutable (determined by each view model implementation, in the namespace Carismar.Core)
 * @member {String} Id
 */
PageAreaModelsReadPageWidget.prototype['Id'] = undefined;

/**
 * The static name of this widget. Used to translate into icons, or to append to css-classes.
 * @member {String} Name
 */
PageAreaModelsReadPageWidget.prototype['Name'] = undefined;

/**
 * The name of the widget-type
 * @member {String} Type
 */
PageAreaModelsReadPageWidget.prototype['Type'] = undefined;

/**
 * Decides if this {PageArea.Models.Read.PageWidget} is active or not
 * @member {Boolean} Active
 */
PageAreaModelsReadPageWidget.prototype['Active'] = undefined;

/**
 * Holds all CSS Class names that this widget should render
 * @member {Array.<String>} ClassNames
 */
PageAreaModelsReadPageWidget.prototype['ClassNames'] = undefined;

/**
 * The fractional size for this widget in it's container.
 * @member {String} Size
 */
PageAreaModelsReadPageWidget.prototype['Size'] = undefined;

/**
 * The configuration for this {PageArea.Models.Read.PageWidget}
 * @member {String} Configuration
 */
PageAreaModelsReadPageWidget.prototype['Configuration'] = undefined;






export default PageAreaModelsReadPageWidget;

