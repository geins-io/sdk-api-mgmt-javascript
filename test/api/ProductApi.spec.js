/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GeinsManagementApiSdkJs);
  }
}(this, function(expect, GeinsManagementApiSdkJs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GeinsManagementApiSdkJs.ProductApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProductApi', function() {
    describe('addAvailabilityMonitor', function() {
      it('should call addAvailabilityMonitor successfully', function(done) {
        //uncomment below and update the code to test addAvailabilityMonitor
        //instance.addAvailabilityMonitor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addCategoryToProduct', function() {
      it('should call addCategoryToProduct successfully', function(done) {
        //uncomment below and update the code to test addCategoryToProduct
        //instance.addCategoryToProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addImageToProduct', function() {
      it('should call addImageToProduct successfully', function(done) {
        //uncomment below and update the code to test addImageToProduct
        //instance.addImageToProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addRelatedProductsToProduct', function() {
      it('should call addRelatedProductsToProduct successfully', function(done) {
        //uncomment below and update the code to test addRelatedProductsToProduct
        //instance.addRelatedProductsToProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchUpdateProductItems', function() {
      it('should call batchUpdateProductItems successfully', function(done) {
        //uncomment below and update the code to test batchUpdateProductItems
        //instance.batchUpdateProductItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchUpdateStockValues', function() {
      it('should call batchUpdateStockValues successfully', function(done) {
        //uncomment below and update the code to test batchUpdateStockValues
        //instance.batchUpdateStockValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProduct', function() {
      it('should call createProduct successfully', function(done) {
        //uncomment below and update the code to test createProduct
        //instance.createProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProductItems', function() {
      it('should call createProductItems successfully', function(done) {
        //uncomment below and update the code to test createProductItems
        //instance.createProductItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProductById', function() {
      it('should call getProductById successfully', function(done) {
        //uncomment below and update the code to test getProductById
        //instance.getProductById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProductItemById', function() {
      it('should call getProductItemById successfully', function(done) {
        //uncomment below and update the code to test getProductItemById
        //instance.getProductItemById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('linkRelatedProductsByRelationId', function() {
      it('should call linkRelatedProductsByRelationId successfully', function(done) {
        //uncomment below and update the code to test linkRelatedProductsByRelationId
        //instance.linkRelatedProductsByRelationId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAllProductItemsPaged', function() {
      it('should call listAllProductItemsPaged successfully', function(done) {
        //uncomment below and update the code to test listAllProductItemsPaged
        //instance.listAllProductItemsPaged(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFeeds', function() {
      it('should call listFeeds successfully', function(done) {
        //uncomment below and update the code to test listFeeds
        //instance.listFeeds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProductItems', function() {
      it('should call listProductItems successfully', function(done) {
        //uncomment below and update the code to test listProductItems
        //instance.listProductItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProductRelationTypes', function() {
      it('should call listProductRelationTypes successfully', function(done) {
        //uncomment below and update the code to test listProductRelationTypes
        //instance.listProductRelationTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryProducts', function() {
      it('should call queryProducts successfully', function(done) {
        //uncomment below and update the code to test queryProducts
        //instance.queryProducts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryProductsPaged', function() {
      it('should call queryProductsPaged successfully', function(done) {
        //uncomment below and update the code to test queryProductsPaged
        //instance.queryProductsPaged(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryStock', function() {
      it('should call queryStock successfully', function(done) {
        //uncomment below and update the code to test queryStock
        //instance.queryStock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProduct', function() {
      it('should call updateProduct successfully', function(done) {
        //uncomment below and update the code to test updateProduct
        //instance.updateProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProductItem', function() {
      it('should call updateProductItem successfully', function(done) {
        //uncomment below and update the code to test updateProductItem
        //instance.updateProductItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
