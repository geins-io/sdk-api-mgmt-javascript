/**
 * geins-management-api-sdk-js
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GeinsManagementApiSdkJs);
  }
}(this, function(expect, GeinsManagementApiSdkJs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GeinsManagementApiSdkJs.OrderApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrderApi', function() {
    describe('addCommentToOrder', function() {
      it('should call addCommentToOrder successfully', function(done) {
        //uncomment below and update the code to test addCommentToOrder
        //instance.addCommentToOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOrder', function() {
      it('should call createOrder successfully', function(done) {
        //uncomment below and update the code to test createOrder
        //instance.createOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOrderId', function() {
      it('should call createOrderId successfully', function(done) {
        //uncomment below and update the code to test createOrderId
        //instance.createOrderId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOrder', function() {
      it('should call deleteOrder successfully', function(done) {
        //uncomment below and update the code to test deleteOrder
        //instance.deleteOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCaptureById', function() {
      it('should call getCaptureById successfully', function(done) {
        //uncomment below and update the code to test getCaptureById
        //instance.getCaptureById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrderById', function() {
      it('should call getOrderById successfully', function(done) {
        //uncomment below and update the code to test getOrderById
        //instance.getOrderById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrderStatuses', function() {
      it('should call getOrderStatuses successfully', function(done) {
        //uncomment below and update the code to test getOrderStatuses
        //instance.getOrderStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRefundById', function() {
      it('should call getRefundById successfully', function(done) {
        //uncomment below and update the code to test getRefundById
        //instance.getRefundById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('partialUpdateOfOrder', function() {
      it('should call partialUpdateOfOrder successfully', function(done) {
        //uncomment below and update the code to test partialUpdateOfOrder
        //instance.partialUpdateOfOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryOrders', function() {
      it('should call queryOrders successfully', function(done) {
        //uncomment below and update the code to test queryOrders
        //instance.queryOrders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setCaptureAsProcessed', function() {
      it('should call setCaptureAsProcessed successfully', function(done) {
        //uncomment below and update the code to test setCaptureAsProcessed
        //instance.setCaptureAsProcessed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPaymentAsPayed', function() {
      it('should call setPaymentAsPayed successfully', function(done) {
        //uncomment below and update the code to test setPaymentAsPayed
        //instance.setPaymentAsPayed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRefundAsProcessed', function() {
      it('should call setRefundAsProcessed successfully', function(done) {
        //uncomment below and update the code to test setRefundAsProcessed
        //instance.setRefundAsProcessed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOrderStatus', function() {
      it('should call updateOrderStatus successfully', function(done) {
        //uncomment below and update the code to test updateOrderStatus
        //instance.updateOrderStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTransactionData', function() {
      it('should call updateTransactionData successfully', function(done) {
        //uncomment below and update the code to test updateTransactionData
        //instance.updateTransactionData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateOrder', function() {
      it('should call validateOrder successfully', function(done) {
        //uncomment below and update the code to test validateOrder
        //instance.validateOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
